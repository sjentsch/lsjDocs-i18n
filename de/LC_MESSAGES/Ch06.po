#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-02 22:44+0200\n"
"PO-Revision-Date: 2025-03-31 16:00+0000\n"
"Last-Translator: Anna Schmidtke <anna.schmidtke@ipu-berlin.de>\n"
"Language-Team: German <https://hosted.weblate.org/projects/lsjdocs/ch06/de/"
">\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.15.0\n"

#: ../../Ch06/Ch06_DataHandling.rst:4
msgid "Pragmatic matters"
msgstr "Pragmatische Fragen"

#: ../../Ch06/Ch06_DataHandling.rst:20
msgid ""
"*The garden of life never seems to confine itself to the plots philosophers "
"have laid out for its convenience. Maybe a few more tractors would do the "
"trick.*"
msgstr ""
"*Der Garten des Lebens scheint sich nie auf die Grundstücke zu beschränken, "
"die Philosophen für ihre Bequemlichkeit angelegt haben. Vielleicht würden "
"ein paar Traktoren einen Unterschied machen.*"

#: ../../Ch06/Ch06_DataHandling.rst:24
msgid "Roger Zelazny (Home is the Hangman, 1975)"
msgstr "Roger Zelazny (*Home is the Hangman*, 1975)"

#: ../../Ch06/Ch06_DataHandling.rst:27
msgid ""
"This is a somewhat strange chapter, even by my standards. My goal in this "
"chapter is to talk a bit more honestly about the realities of working with "
"data than you’ll see anywhere else in the book. The problem with real world "
"data sets is that they are *messy*. Very often the data file that you start "
"out with doesn’t have the variables stored in the right format for the "
"analysis you want to do. Sometimes there might be a lot of missing values in "
"your data set. Sometimes you only want to analyse a subset of the data. Et "
"cetera. In other words, there’s a lot of **data manipulation** that you need "
"to do just to get the variables in your data set into the format that you "
"need it. The purpose of this chapter is to provide a basic introduction to "
"these pragmatic topics. Although the chapter is motivated by the kinds of "
"practical issues that arise when manipulating real data, I’ll stick with the "
"practice that I’ve adopted through most of the book and rely on very small, "
"toy data sets that illustrate the underlying issue. Because this chapter is "
"essentially a collection of techniques and doesn’t tell a single coherent "
"story, it may be useful to start with a list of topics:"
msgstr ""
"Dies ist, selbst für meine Verhältnisse, ein etwas spezielles Kapitel. Mein "
"Ziel in diesem Kapitel ist es, etwas ehrlicher, als sonst in diesem Buch, "
"über die Realität der Datenverarbeitung zu sprechen. Das Problem mit realen "
"Datensätzen ist nämlich, dass sie *messy* sind. Sehr oft sind die Variablen "
"in dem Datensatz, mit dem Sie beginnen, nicht in dem Format gespeichert, "
"welches Sie für Ihre Analyse brauchen. Gelegentlich wird Ihr Datensatz viele "
"fehlende Werte enthalten. Manchmal wollen Sie nur eine Teilmenge der Daten "
"analysieren. Et cetera. Mit anderen Worten: Sie müssen viele "
"**Datenmanipulationen** vornehmen, um die Variablen in Ihrem Datensatz in "
"das von Ihnen benötigte Format zu bringen. Ziel des Kapitels ist es, eine "
"grundlegende Einführung in dieses pragmatische Themenfeld zu geben. Obwohl "
"das Kapitel durch die praktischen Probleme motiviert ist, die bei der "
"Manipulation echter Daten auftreten, bleibe ich bei der Praxis, die ich auch "
"für den größten Teil des Buches übernommen habe, und stütze mich auf sehr "
"kleine Spielzeugdatensätze, die das zugrunde liegende Problem illustrieren. "
"Da dieses Kapitel im Wesentlichen eine Sammlung von Techniken ist und keine "
"zusammenhängende Geschichte erzählt, ist es nützlich zunächst mit einer "
"Liste von Themen zu beginnen:"

#: ../../Ch06/Ch06_DataHandling.rst:45
msgid ":doc:`Ch06_DataHandling_1`"
msgstr ":doc:`Ch06_DataHandling_1`"

#: ../../Ch06/Ch06_DataHandling.rst:47
msgid ":doc:`Ch06_DataHandling_2`"
msgstr ":doc:`Ch06_DataHandling_2`"

#: ../../Ch06/Ch06_DataHandling.rst:49
msgid ":doc:`Ch06_DataHandling_3`"
msgstr ":doc:`Ch06_DataHandling_3`"

#: ../../Ch06/Ch06_DataHandling.rst:51
msgid ":doc:`Ch06_DataHandling_4`"
msgstr ":doc:`Ch06_DataHandling_4`"

#: ../../Ch06/Ch06_DataHandling.rst:53
msgid ":doc:`Ch06_DataHandling_5`"
msgstr ":doc:`Ch06_DataHandling_5`"

#: ../../Ch06/Ch06_DataHandling.rst:55
msgid ""
"As you can see, the list of topics that the chapter covers is pretty broad, "
"and there’s a *lot* of content there. Even though this is one of the longest "
"and hardest chapters in the book, I’m really only scratching the surface of "
"several fairly different and important topics. My advice, as usual, is to "
"read through the chapter once and try to follow as much of it as you can. "
"Don’t worry too much if you can’t grasp it all at once, especially the later "
"sections. The rest of the book is only lightly reliant on this chapter so "
"you can get away with just understanding the basics. However, what you’ll "
"probably find is that later on you’ll need to flick back to this chapter in "
"order to understand some of the concepts that I refer to here."
msgstr ""
"Wie Sie sehen können, ist die Liste der Themen, die das Kapitel abdeckt, "
"ziemlich umfangreich, und es gibt eine *große* Menge an Inhalt. Obwohl dies "
"eines der längsten und schwierigsten Kapitel des Buches ist, kratze ich "
"wirklich nur an der Oberfläche einiger ziemlich unterschiedlicher und "
"wichtiger Themen. Mein Rat ist, wie immer, das Kapitel einmal durchzulesen "
"und zu versuchen, so viel wie möglich davon zu verstehen. Machen Sie sich "
"nicht zu viele Gedanken, wenn Sie nicht alles auf einmal erfassen können, "
"insbesondere die späteren Abschnitte. Der Rest des Buches stützt sich nur in "
"geringem Maße auf dieses Kapitel, so dass Sie sich damit begnügen können, "
"nur die Grundlagen zu verstehen. Sie werden jedoch wahrscheinlich "
"feststellen, dass Sie später zu diesem Kapitel zurückblättern müssen, um "
"einige der Konzepte zu verstehen, auf die ich hier Bezug nehme."

#: ../../Ch06/Ch06_DataHandling_1.rst:4
msgid "Tabulating and cross-tabulating data"
msgstr "Erstellen von Häufigkeitstabellen und Kreuztabellen aus Ihren Daten"

#: ../../Ch06/Ch06_DataHandling_1.rst:6
msgid ""
"A very common task when analysing data is the construction of frequency "
"tables, or cross-tabulation of one variable against another. These tasks can "
"be achieved in jamovi and I’ll show you how in this section."
msgstr ""
"Eine sehr häufige Aufgabe bei der Analyse von Daten ist die Erstellung von "
"Häufigkeitstabellen einer Variablen oder von Kreuztabellen einer Variablen "
"mit einer anderen. Diese Aufgaben können in jamovi einfach erledigt werden. "
"In diesem Abschnitt, zeige ich Ihnen, wie Sie das machen können."

#: ../../Ch06/Ch06_DataHandling_1.rst:11
msgid "Creating tables for single variables"
msgstr "Häufigkeitstabellen für einzelne Variablen erstellen"

#: ../../Ch06/Ch06_DataHandling_1.rst:13
msgid ""
"Let’s start with a simple example. As a parent of a small child I naturally "
"spend a lot of time watching TV shows like *In the Night Garden*. In the |"
"nightgarden|_ data set, I’ve transcribed a short section of the dialogue. "
"The file contains two variables of interest, ``speaker`` and ``utterance``. "
"Open up this data set in jamovi and take a look at the data in the ``Data`` "
"view. You will see that the data looks something like this:"
msgstr ""
"Lassen Sie uns mit einem einfachen Beispiel beginnen. Als Elternteil eines "
"kleinen Kindes verbringe ich viel Zeit damit, Fernsehsendungen wie *In the "
"Night Garden* zu sehen. In dem Datensatz |nightgarden|_ habe ich einen "
"kurzen Abschnitt des Dialogs transkribiert. Die Datei enthält zwei "
"Variablen, die von Interesse sind: ``speaker`` und ``utterance``. Öffnen Sie "
"diesen Datensatz in jamovi und werfen Sie einen Blick auf die Daten (drücken "
"Sie auf den Tab ``Data``). Sie werden sehen, dass die Daten etwa so aussehen:"

#: ../../Ch06/Ch06_DataHandling_1.rst:20
msgid "``speaker`` variable"
msgstr "Variable ``speaker``"

#: ../../Ch06/Ch06_DataHandling_1.rst:26
msgid "``utterance`` variable"
msgstr "Variable ``utterance``"

#: ../../Ch06/Ch06_DataHandling_1.rst:33
msgid ""
"Looking at this it becomes very clear what happened to my sanity! With these "
"as my data, one task I might find myself needing to do is construct a "
"frequency count of the number of words each character speaks during the "
"show. The jamovi ``Descriptives`` screen has a check box called ``Frequency "
"tables`` which does just this, see :numref:`fig-freqtable`."
msgstr ""
"Wenn ich mir das ansehe, wird mir klar, was mit meinem Verstand passiert "
"ist! Eine Aufgabe, die ich mit diesen Daten zu erledigen habe, könnte zum "
"Beispiel sein, eine Liste mit der Anzahl der Wörter, die jeder Charakter "
"während der Serie spricht, zu erstellen. Das jamovi-Eingabefeld "
"``Descriptives`` hat eine Checkbox namens ``Frequency tables``, welche die "
"folgende Ausgabe erstellt, wenn man sie aktiviert (siehe :numref:`fig-"
"freqtable`):"

#: ../../Ch06/Ch06_DataHandling_1.rst:41 ../../Ch06/Ch06_DataHandling_1.rst:45
msgid "Frequency table for the ``speaker`` variable"
msgstr "Häufigkeitstabelle für die Variable ``speaker``"

#: ../../Ch06/Ch06_DataHandling_1.rst:49
msgid ""
"The output here tells us on the first line that what we’re looking at is a "
"tabulation of the ``speaker`` variable. In the ``Levels`` column it lists "
"all the different speakers that exist in the data, and in the ``Counts`` "
"column it tells you how many times that speaker appears in the data. In "
"other words, it’s a frequency table."
msgstr ""
"Die Ausgabe, die wir erhalten, sagt uns in der ersten Zeile, dass es sich um "
"eine Tabelle für die Variable ``speaker`` handelt. In der Spalte ``Levels`` "
"werden alle Sprecher aufgelistet, die es in diesem Datensatz gibt und in der "
"Spalte ``Counts`` wird angegeben, wie häufig dieser Sprecher im Datensatz "
"vorkommt. Mit anderen Worten, es ist eine Häufigkeitstabelle."

#: ../../Ch06/Ch06_DataHandling_1.rst:55
msgid ""
"In jamovi, the ``Frequency tables`` check box will only produce a table for "
"single variables. For a table of two variables, for example combining "
"``speaker`` and ``utterance`` so that we can see how many times each speaker "
"said a particular utterance, we need a cross-tabulation or contingency "
"table. In jamovi you can do this by selecting the ``Frequencies`` → "
"``Contingency Tables`` → ``Independent Samples`` analysis, and moving the "
"``speaker`` variable into the ``Rows`` box, and the ``utterance`` variable "
"into the ``Columns`` box. You then should have a contingency table like the "
"one shown in :numref:`fig-contingencytable`."
msgstr ""
"Wird die Checkbox ``Frequency tables`` in jamovi aktiviert, wird jeweils "
"eine Tabelle für jede einzelne Variablen erstellt. Für eine Tabelle, welche "
"die Kombination zweier Variablen darstellt, zum Beispiel die Kombination von "
"``speaker`` und ``utterance``, brauchen wir eine Kreuztabelle. In dieser "
"Kreuztabelle ist zu sehen, wie oft jeder Sprecher eine bestimmte Äußerung "
"gemacht hat. In jamovi können Sie dies tun, indem Sie die Analyse "
"``Frequencies`` → ``Contingency Tables`` → ``Independent Samples`` auswählen "
"und die Variable ``speaker`` in das Feld ``Rows`` und die Variable "
"``utterance`` in das Feld ``Columns`` verschieben. Sie sollten dann eine "
"Kreuztabelle wie die in :numref:`fig-contingencytable` gezeigte erhalten."

#: ../../Ch06/Ch06_DataHandling_1.rst:67
msgid "Contingency table for ``speaker`` and ``utterance``"
msgstr "Kreuztabelle für ``speaker`` und ``utterance``"

#: ../../Ch06/Ch06_DataHandling_1.rst:71
msgid "Contingency table for the ``speaker`` and ``utterance`` variables"
msgstr "Kreuztabelle für die Variablen ``speaker`` und ``utterance``"

#: ../../Ch06/Ch06_DataHandling_1.rst:75
msgid ""
"Don’t worry about the ``χ² Tests`` table that is produced. We are going to "
"cover this later on in chapter :doc:`../Ch10/Ch10_ChiSquare`. When "
"interpreting the contingency table remember that these are counts, so the "
"fact that the first row and second column of numbers corresponds to a value "
"of 2 indicates that ``makka-pakka`` (row 1) says ``onk`` (column 2) twice in "
"this data set."
msgstr ""
"Kümmern Sie sich nicht um die Tabelle ``χ² Tests``, die automatisch mit "
"erzeugt wird. Wir werden später in Kapitel :doc:`../Ch10/Ch10_ChiSquare` "
"darauf zurückkommen. Wenn Sie die Kreuztabelle interpretieren, denken Sie "
"daran, dass es sich hier um Häufigkeiten handelt. Die Tatsache, dass in der "
"ersten Zeile und in der zweiten Spalte, die Zahlen enthält, einen Wert von 2 "
"steht, bedeutet, dass ``makka-pakka`` (Zeile 1) in diesem Datensatz zweimal "
"``onk`` (Spalte 2) sagt."

#: ../../Ch06/Ch06_DataHandling_1.rst:82
msgid "Adding percentages to a contingency table"
msgstr "Prozentanteile zu einer Kreuztabelle hinzufügen"

#: ../../Ch06/Ch06_DataHandling_1.rst:84
msgid ""
"The contingency table shown in :numref:`fig-contingencytable` shows a table "
"of raw frequencies. That is, a count of the total number of cases for "
"different combinations of levels of the specified variables. However, often "
"you want your data to be organised in terms of percentages as well as "
"counts. You can find the check boxes for different percentages under the "
"``Cells`` option in the ``Contingency Tables`` window. First, click on the "
"``Row`` check box and the Contingency Table in the output window will change "
"to the one in :numref:`fig-contingencyrow`."
msgstr ""
"Die Kreuztabelle in :numref:`fig-contingencytable` zeigt eine Tabelle der "
"absoluten Häufigkeiten in den Rohdaten. Das heißt also die Gesamtzahl der "
"Fälle für die jeweiligen Kombinationen der verschiedenen Ausprägungen "
"(Level) der angegebenen Variablen. Häufig möchten Sie Ihre Daten jedoch "
"nicht nur in Form von Häufigkeiten, sondern auch in Form von Prozentanteilen "
"(relative Häufigkeiten) aufbereiten. Sie finden die Checkboxen für die "
"verschiedenen Prozentangaben unter der Option ``Cells`` im Fenster "
"``Contingency Tables``. Klicken Sie zunächst auf die Checkbox ``Rows`` und "
"die Kreuztabelle im Ausgabefenster wird so verändert, so dass sie der "
"Tabelle in der Abbildung :numref:`fig-contingencyrow` ähnelt."

#: ../../Ch06/Ch06_DataHandling_1.rst:95
msgid ""
"Contingency table with row percentages for ``speaker`` and ``utterance``"
msgstr ""
"Kreuztabelle mit zeilenweisen Prozentanteilen für die Variablen ``speaker`` "
"und ``utterance``"

#: ../../Ch06/Ch06_DataHandling_1.rst:99
msgid ""
"Contingency table for the ``speaker`` and ``utterance`` variables, with row "
"percentages"
msgstr ""
"Kreuztabelle für die Variablen ``speaker`` und ``utterances`` mit "
"Prozentanteilen für jede Zeile"

#: ../../Ch06/Ch06_DataHandling_1.rst:104
msgid ""
"What we’re looking at here is the percentage of utterances made by each "
"character. In other words, 50\\% of ``makka-pakka``’s utterances are "
"``pip``, and the other 50\\% are ``onk``. Let’s contrast this with the table "
"we get when we calculate column percentages (uncheck ``Row`` and check "
"``Column`` in the ``Cells`` options window), see :numref:`fig-"
"contingencycol`. In this version, what we’re seeing is the percentage of "
"characters associated with each utterance. For instance, whenever the "
"utterance ``ee`` is made (in this data set), 100\\% of the time it’s a "
"Tombliboo saying it."
msgstr ""
"Was wir hier sehen können, ist der prozentuale Anteil der Äußerungen von "
"jedem der Charaktere. Mit anderen Worten: 50 % der Äußerungen von ``makka-"
"pakka`` sind ``pip``, und die anderen 50 % sind ``onk``. Vergleichen wir "
"dies mit der Tabelle, die wir erhalten, wenn wir die prozentualen Anteile "
"der Spalten berechnen (deaktivieren Sie das Kontrollhäkchen in ``Row`` und "
"aktivieren Sie ``Column`` im Optionsfenster ``Cells``), siehe :numref:`fig-"
"contingencycol`. In dieser Version sehen wir den prozentualen Anteil der "
"Charaktere, die zu jeder Äußerung gehören. Wenn in diesem Datensatz zum "
"Beispiel ``ee`` gesagt wird, dann ist es in 100 % der Fälle ein Tombliboo, "
"der das sagt."

#: ../../Ch06/Ch06_DataHandling_1.rst:115
msgid ""
"Contingency table with column percentages for ``speaker`` and ``utterance``"
msgstr ""
"Kreuztabelle mit Spaltenprozentsätzen für ``speaker`` und ``utterance``"

#: ../../Ch06/Ch06_DataHandling_1.rst:119
msgid ""
"Contingency table for the ``speaker`` and ``utterance`` variables, with "
"column percentages"
msgstr ""
"Kreuztabelle für die Variablen ``speaker`` und ``utterance``, mit "
"Spaltenprozentsätzen"

#: ../../Ch06/Ch06_DataHandling_2.rst:4
msgid "Logical expressions in jamovi"
msgstr "Logische Ausdrücke in jamovi"

#: ../../Ch06/Ch06_DataHandling_2.rst:6
msgid ""
"A key concept that a lot of data transformations in jamovi rely on is the "
"idea of a **logical value**. A logical value is an assertion about whether "
"something is true or false. This is implemented in jamovi in a pretty "
"straightforward way. There are two logical values, namely ``TRUE`` and "
"``FALSE``. Despite the simplicity, logical values are very useful things. "
"Let’s see how they work."
msgstr ""
"Ein Schlüsselkonzept, auf das sich viele Datentransformationen in jamovi "
"stützen, ist die Idee eines **logischen Wertes**. Ein logischer Wert ist "
"eine Behauptung darüber, ob etwas wahr oder falsch ist. Dies wird in jamovi "
"auf ziemlich einfache Weise implementiert. Es gibt zwei logische Werte, "
"nämlich ``TRUE`` und ``FALSE``. Trotz ihrer Einfachheit sind logische Werte "
"sehr nützlich. Schauen wir uns an, wie sie funktionieren."

#: ../../Ch06/Ch06_DataHandling_2.rst:14
msgid "Assessing mathematical truths"
msgstr "Beurteilen mathematischer Wahrheiten"

#: ../../Ch06/Ch06_DataHandling_2.rst:16
msgid ""
"In George Orwell’s classic book *1984* one of the slogans used by the "
"totalitarian Party was “two plus two equals five”. The idea being that the "
"political domination of human freedom becomes complete when it is possible "
"to subvert even the most basic of truths. It’s a terrifying thought, "
"especially when the protagonist Winston Smith finally breaks down under "
"torture and agrees to the proposition. “Man is infinitely malleable”, the "
"book says. I’m pretty sure that this isn’t true of humans\\ [#]_ and it’s "
"definitely not true of jamovi. jamovi is not infinitely malleable, it has "
"rather firm opinions on the topic of what is and isn’t true, at least as "
"regards basic mathematics. If I ask it to calculate ``2 + 2``,\\ [#]_ it "
"always gives the same answer, and it’s not bloody 5!"
msgstr ""
"In George Orwells klassischem Buch *1984* lautet einer der Slogans der "
"totalitären Partei „zwei plus zwei gleich fünf“. Der Gedanke dahinter ist, "
"dass die politische Beherrschung der menschlichen Freiheit vollständig wird, "
"wenn es möglich ist, selbst die grundlegendsten Wahrheiten zu untergraben. "
"Ein erschreckender Gedanke, vor allem, wenn der Protagonist Winston Smith "
"schließlich unter der Folter zusammenbricht und dem Satz zustimmt. „Der "
"Mensch ist unendlich formbar“, heißt es im Buch. Ich bin mir ziemlich "
"sicher, dass das nicht auf den Menschen zutrifft.\\ [#]_ und schon gar nicht "
"auf jamovi. jamovi ist nicht unendlich formbar, sondern hat eine ziemlich "
"feste Meinung darüber, was wahr ist und was nicht, zumindest was die "
"Grundrechenarten angeht. Wenn ich es bitte, ``2 + 2``,\\ [#]_ zu berechnen, "
"gibt es immer die gleiche Antwort, und es ist nicht die verdammte 5!"

#: ../../Ch06/Ch06_DataHandling_2.rst:29
msgid ""
"Of course, so far jamovi is just doing the calculations. I haven’t asked it "
"to explicitly assert that ``2 + 2 = 4`` is a true statement. If I want "
"jamovi to make an explicit judgement, I can use a command like this: ``2 + 2 "
"== 4``"
msgstr ""
"Natürlich führt jamovi bisher nur die Berechnungen durch. Ich habe es nicht "
"darum gebeten, ausdrücklich zu behaupten, dass ``2 + 2 = 4`` eine wahre "
"Aussage ist. Wenn ich möchte, dass jamovi ein explizites Urteil fällt, kann "
"ich einen Befehl wie diesen verwenden: ``2 + 2 == 4``"

#: ../../Ch06/Ch06_DataHandling_2.rst:34
msgid ""
"What I’ve done here is use the **equality operator**, ``==``, to force "
"jamovi to make a “``TRUE`` or ``FALSE``” judgement.\\ [#]_ Okay, let’s see "
"what jamovi thinks of the Party slogan, so type this into the compute new "
"variable ``Formula`` box:"
msgstr ""
"Ich habe hier den **Gleichheitsoperator**, ``==`` verwendet, um jamovi zu "
"zwingen, ein „``TRUE`` oder ``FALSE``“ Urteil zu fällen.\\ [#]_ Lass uns "
"sehen, was jamovi über den Parteislogan denkt, also gib das in das Feld "
"``Formula`` einer neuen Variable ein:"

#: ../../Ch06/Ch06_DataHandling_2.rst:43
msgid ""
"And what do you get? It should be a whole set of ``FALSE`` values in the "
"spreadsheet column for your newly computed variable. Booyah! Freedom and "
"ponies for all! Or something like that. Anyway, it was worth having a look "
"at what happens if I try to *force* jamovi to believe that two plus two is "
"five by making a statement like ``2 + 2 = 5``. I know that if I do this in "
"another program, say ``R``, then it throws up an error message. But wait, if "
"you do this in jamovi you get a whole set of ``FALSE`` values. So what is "
"going on? Well, it seems that jamovi is being pretty smart and realises that "
"you are testing whether it is ``TRUE`` or ``FALSE`` that ``2 + 2 = 5``, "
"regardless of whether you use the correct **equality operator**, ``==``, or "
"the equals sign ``=``."
msgstr ""
"Und was erhalten Sie? Es sollte eine ganze Reihe von ``FALSE`` Werten in der "
"Spalte für Ihre neu berechnete Variable in der Datentabelle sein. Booyah! "
"Freiheit und Ponys für alle! Oder so ähnlich. Wie auch immer, es lohnt sich, "
"einen Blick darauf zu werfen, was passiert, wenn ich *versuche*, jamovi zu "
"zwingen, zu glauben, dass zwei plus zwei gleich fünf ist, indem ich eine "
"Aussage wie ``2 + 2 = 5`` mache. Ich weiß, dass, wenn ich dies in einem "
"anderen Programm tue, sagen wir ``R``, eine Fehlermeldung ausgegeben wird. "
"Aber warte, wenn Sie das in jamovi machen, bekommen Sie einen ganzen Satz "
"von ``FALSE`` Werten. Was ist hier also los? Nun, es scheint, dass jamovi "
"ziemlich schlau ist und erkennt, dass Sie testen, ob es ``TRUE`` oder "
"``FALSE`` ist, dass ``2 + 2 = 5``, unabhängig davon, ob Sie den korrekten "
"**Gleichheitsoperator**, ``==``, oder das Gleichheitszeichen ``=`` verwenden."

#: ../../Ch06/Ch06_DataHandling_2.rst:56
msgid "Logical operations"
msgstr "Logische Operationen"

#: ../../Ch06/Ch06_DataHandling_2.rst:58
msgid ""
"So now we’ve seen logical operations at work. But so far we’ve only seen the "
"simplest possible example. You probably won’t be surprised to discover that "
"we can combine logical operations with other operations and functions in a "
"more complicated way, like this:"
msgstr ""
"Jetzt haben wir also gesehen, wie logische Operationen funktionieren. Aber "
"bisher haben wir nur das einfachste mögliche Beispiel gesehen. Es wird Sie "
"wahrscheinlich nicht überraschen, dass wir logische Operationen mit anderen "
"Operationen und Funktionen auf kompliziertere Weise kombinieren können, etwa "
"so:"

#: ../../Ch06/Ch06_DataHandling_2.rst:67
msgid "or this"
msgstr "oder so:"

#: ../../Ch06/Ch06_DataHandling_2.rst:73
msgid ""
"Not only that, but as :numref:`tab-logicals` illustrates, there are several "
"other logical operators that you can use corresponding to some basic "
"mathematical concepts. Hopefully these are all pretty self-explanatory. For "
"example, the **less than** operator ``<`` checks to see if the number on the "
"left is less than the number on the right. If it’s less, then jamovi returns "
"an answer of ``TRUE``, but if the two numbers are equal, or if the one on "
"the right is larger, then jamovi returns an answer of ``FALSE``."
msgstr ""
"Darüber hinaus gibt es, wie :numref:`tab-logicals` zeigt, mehrere andere "
"logische Operatoren, die Sie entsprechend einigen grundlegenden "
"mathematischen Konzepten verwenden können. Hoffentlich sind diese alle "
"ziemlich selbsterklärend. Der Operator **weniger als** ` `<`` prüft zum "
"Beispiel, ob die Zahl auf der linken Seite kleiner ist als die Zahl auf der "
"rechten Seite. Wenn sie kleiner ist, gibt jamovi die Antwort ``TRUE``, aber "
"wenn die beiden Zahlen gleich sind oder wenn die Zahl rechts größer ist, "
"gibt jamovi die Antwort ``FALSE``."

#: ../../Ch06/Ch06_DataHandling_2.rst:81
msgid ""
"Some logical operators. Technically I should be calling these “binary "
"relational operators”, but quite frankly I don’t want to. It’s my book so no-"
"one can make me."
msgstr ""
"Andere logische Operatoren. Wenn ich sie technisch völlig korrekt "
"beschreiben sollte, würde ich sie „binäre relationale Operatoren“ nennen, "
"aber ehrlich gesagt will ich das nicht. Es ist mein Buch, also kann mich "
"niemand zwingen."

#: ../../Ch06/Ch06_DataHandling_2.rst:87 ../../Ch06/Ch06_DataHandling_2.rst:137
msgid "operation"
msgstr "Operation"

#: ../../Ch06/Ch06_DataHandling_2.rst:87 ../../Ch06/Ch06_DataHandling_2.rst:137
msgid "operator"
msgstr "Operator"

#: ../../Ch06/Ch06_DataHandling_2.rst:87 ../../Ch06/Ch06_DataHandling_2.rst:137
msgid "example input"
msgstr "Beispiel-Eingabe"

#: ../../Ch06/Ch06_DataHandling_2.rst:87 ../../Ch06/Ch06_DataHandling_2.rst:137
msgid "answer"
msgstr "Ausgabe"

#: ../../Ch06/Ch06_DataHandling_2.rst:89
msgid "less than"
msgstr "weniger als"

#: ../../Ch06/Ch06_DataHandling_2.rst:89
msgid "``<``"
msgstr "``<``"

#: ../../Ch06/Ch06_DataHandling_2.rst:89
msgid "``2 < 3``"
msgstr "``2 < 3``"

#: ../../Ch06/Ch06_DataHandling_2.rst:89 ../../Ch06/Ch06_DataHandling_2.rst:91
#: ../../Ch06/Ch06_DataHandling_2.rst:95 ../../Ch06/Ch06_DataHandling_2.rst:99
#: ../../Ch06/Ch06_DataHandling_2.rst:141
msgid "``TRUE``"
msgstr "``TRUE``"

#: ../../Ch06/Ch06_DataHandling_2.rst:91
msgid "less than or equal to"
msgstr "kleiner als oder gleich"

#: ../../Ch06/Ch06_DataHandling_2.rst:91
msgid "``<=``"
msgstr "``<=``"

#: ../../Ch06/Ch06_DataHandling_2.rst:91
msgid "``2 <= 2``"
msgstr "``2 <= 2``"

#: ../../Ch06/Ch06_DataHandling_2.rst:93
msgid "greater than"
msgstr "größer als"

#: ../../Ch06/Ch06_DataHandling_2.rst:93
msgid "``>``"
msgstr "``>``"

#: ../../Ch06/Ch06_DataHandling_2.rst:93
msgid "``2 > 3``"
msgstr "``2 > 3``"

#: ../../Ch06/Ch06_DataHandling_2.rst:93 ../../Ch06/Ch06_DataHandling_2.rst:97
#: ../../Ch06/Ch06_DataHandling_2.rst:139
#: ../../Ch06/Ch06_DataHandling_2.rst:143
msgid "``FALSE``"
msgstr "``FALSE``"

#: ../../Ch06/Ch06_DataHandling_2.rst:95
msgid "greater than or equal to"
msgstr "größer als oder gleich"

#: ../../Ch06/Ch06_DataHandling_2.rst:95
msgid "``>=``"
msgstr "``>=``"

#: ../../Ch06/Ch06_DataHandling_2.rst:95
msgid "``2 >= 2``"
msgstr "``2 >= 2``"

#: ../../Ch06/Ch06_DataHandling_2.rst:97
msgid "equal to"
msgstr "gleich"

#: ../../Ch06/Ch06_DataHandling_2.rst:97
msgid "``==``"
msgstr "``==``"

#: ../../Ch06/Ch06_DataHandling_2.rst:97
msgid "``2 == 3``"
msgstr "``2 == 3``"

#: ../../Ch06/Ch06_DataHandling_2.rst:99
msgid "not equal to"
msgstr "ungleich"

#: ../../Ch06/Ch06_DataHandling_2.rst:99
msgid "``!=``"
msgstr "``!=``"

#: ../../Ch06/Ch06_DataHandling_2.rst:99
msgid "``2 != 3``"
msgstr "``2 != 3``"

#: ../../Ch06/Ch06_DataHandling_2.rst:103
msgid ""
"In contrast, the **less than or equal to** operator ``<=`` will do exactly "
"what it says. It returns a value of ``TRUE`` if the number of the left hand "
"side is less than or equal to the number on the right hand side. At this "
"point I hope it’s pretty obvious what the **greater than** operator ``>`` "
"and the **greater than or equal to** operator ``>=`` do!"
msgstr ""
"Im Gegensatz dazu tut der **kleiner als oder gleich** Operator ``<=`` genau "
"das, was er sagt. Er gibt einen Wert von ``TRUE`` zurück, wenn die Zahl auf "
"der linken Seite kleiner oder gleich der Zahl auf der rechten Seite ist. An "
"dieser Stelle ist es hoffentlich ziemlich offensichtlich, was der **größer "
"als** Operator ``>`` und der **größer oder gleich** Operator ``>=`` tun!"

#: ../../Ch06/Ch06_DataHandling_2.rst:109
msgid ""
"Next on the list of logical operators is the **not equal to** operator ``!"
"=`` which, as with all the others, does what it says it does. It returns a "
"value of ``TRUE`` when things on either side are not identical to each "
"other. Therefore, since ``2 + 2`` isn’t equal to *5* we would get ``TRUE`` "
"as the value for our newly computed variable. Try it and see:"
msgstr ""
"Der nächste auf der Liste der logischen Operatoren ist der Operator "
"**ungleich** ``!=``, der, wie alle anderen auch, das tut, was er sagt. Er "
"gibt einen Wert von ``TRUE`` zurück, wenn die Dinge auf beiden Seiten nicht "
"gleich sind. Da also ``2 + 2`` nicht gleich *5* ist, würden wir ``TRUE`` als "
"Wert für unsere neu berechnete Variable erhalten. Probieren Sie es aus und "
"sehen Sie selbst:"

#: ../../Ch06/Ch06_DataHandling_2.rst:119
msgid ""
"We’re not quite done yet. There are three more logical operations that are "
"worth knowing about, listed in :numref:`tab-logicals2`. These are the "
"**not** operator ``!``, the **and**-operator ``and``, and the **or**-"
"operator ``or``. Like the other logical operators, their behaviour is more "
"or less exactly what you’d expect given their names. For instance, if I ask "
"you to assess the claim that “either ``2 + 2 = 4`` *or* ``2 + 2 = 5``” you’d "
"say that it’s true. Since it’s an “either-or” statement, all we need is for "
"one of the two parts to be true. That’s what the ``or`` operator does:\\ [#]_"
msgstr ""
"Wir sind noch nicht ganz fertig. Es gibt noch drei weitere logische "
"Operationen, die es wert sind, kennengelernt zu werden, und die in :numref:"
"`tab-logicals2` aufgeführt sind. Dies sind der **nicht**-Operator ``!``, der "
"**und**-Operator ``and`` sowie der **oder**-Operator ``or``. Wie die anderen "
"logischen Operatoren verhalten sie sich mehr oder weniger genau so, wie man "
"es aufgrund ihres Namens erwarten würde. Wenn ich Sie zum Beispiel bitte, "
"die Behauptung zu beurteilen, dass „entweder ``2 + 2 = 4`` *oder* ``2 + 2 = "
"5``“ wahr ist, würden Sie sagen, dass sie wahr ist. Da es sich um eine "
"„entweder-oder“-Aussage handelt, muss nur einer der beiden Teile wahr sein. "
"Das ist es, was der Operator ``or`` tut:\\ [#]_"

#: ../../Ch06/Ch06_DataHandling_2.rst:133
msgid "Some more logical operators."
msgstr "Einige weitere logische Operatoren."

#: ../../Ch06/Ch06_DataHandling_2.rst:139
msgid "not"
msgstr "not (nicht)"

#: ../../Ch06/Ch06_DataHandling_2.rst:139
msgid "``NOT``"
msgstr "``NOT``"

#: ../../Ch06/Ch06_DataHandling_2.rst:139
msgid "``NOT(1==1)``"
msgstr "``NOT(1==1)``"

#: ../../Ch06/Ch06_DataHandling_2.rst:141
msgid "or"
msgstr "or (oder)"

#: ../../Ch06/Ch06_DataHandling_2.rst:141
msgid "``or``"
msgstr "``or``"

#: ../../Ch06/Ch06_DataHandling_2.rst:141
msgid "``(1==1) or (2==3)``"
msgstr "``(1==1) or (2==3)``"

#: ../../Ch06/Ch06_DataHandling_2.rst:143
msgid "and"
msgstr "and (und)"

#: ../../Ch06/Ch06_DataHandling_2.rst:143
msgid "``and``"
msgstr "``and``"

#: ../../Ch06/Ch06_DataHandling_2.rst:143
msgid "``(1==1) and (2==3)``"
msgstr "``(1==1) and (2==3)``"

#: ../../Ch06/Ch06_DataHandling_2.rst:146
msgid ""
"On the other hand, if I ask you to assess the claim that “both 2 + 2 = 4 "
"*and* 2 + 2 = 5” you’d say that it’s false. Since this is an *and* statement "
"we need both parts to be true. And that’s what the ``and`` operator does:"
msgstr ""
"Wenn ich Sie dagegen bitte, die Behauptung zu bewerten, dass „sowohl 2 + 2 = "
"4 *als auch* 2 + 2 = 5“ ist, würden Sie sagen, dass sie falsch ist. Da dies "
"eine *and*-Aussage (und) ist, müssen beide Teile wahr sein. Und genau das "
"tut der ``and`` Operator:"

#: ../../Ch06/Ch06_DataHandling_2.rst:154
msgid ""
"Finally, there’s the *not* operator, which is simple but annoying to "
"describe in English. If I ask you to assess my claim that “it is not true "
"that ``2 + 2 = 5``” then you would say that my claim is true, because "
"actually my claim is that “``2 + 2 = 5`` is false”. And I’m right. If we "
"write this in jamovi we use this:"
msgstr ""
"Schließlich gibt es noch den *not*-Operator (nicht), der einfach, aber "
"lästig zu beschreiben ist. Wenn ich Sie bitte, meine Behauptung zu bewerten, "
"dass „es nicht wahr ist, dass ``2 + 2 = 5``“, dann würden Sie sagen, dass "
"meine Behauptung wahr ist, denn eigentlich ist meine Behauptung, dass „``2 + "
"2 = 5`` falsch ist“. Und ich habe Recht. Wenn wir dies in jamovi schreiben, "
"verwenden wir dies:"

#: ../../Ch06/Ch06_DataHandling_2.rst:164
msgid ""
"In other words, since ``2 + 2 == 5`` is a ``FALSE`` statement, it must be "
"the case that ``NOT(2 + 2 == 5)`` is a ``TRUE`` one. Essentially, what we’ve "
"really done is claim that “not false” is the same thing as “true”. "
"Obviously, this isn’t really quite right in real life. But jamovi lives in a "
"much more black or white world. For jamovi everything is either ``TRUE`` or "
"``FALSE``. No shades of grey are allowed."
msgstr ""
"Mit anderen Worten: Da ``2 + 2 == 5`` eine ``FALSE``-Aussage ist, muss "
"``NOT(2 + 2 == 5)`` eine ``TRUE``-Aussage sein. Im Grunde haben wir nur "
"behauptet, dass „nicht falsch“ dasselbe ist wie „wahr“. Das ist im "
"wirklichen Leben offensichtlich nicht ganz richtig. Aber jamovi lebt in "
"einer viel schwarz-weißeren Welt. Für jamovi ist alles entweder ``TRUE`` "
"oder ``FALSE``. Grautöne sind nicht erlaubt."

#: ../../Ch06/Ch06_DataHandling_2.rst:171
msgid ""
"Of course, in our ``2 + 2 = 5`` example, we didn’t really need to use the "
"“not” operator ``NOT`` and the “equals to” operator ``==`` as two separate "
"operators. We could have just used the “not equals to” operator ``!=`` like "
"this:"
msgstr ""
"In unserem Beispiel ``2 + 2 = 5`` war es natürlich nicht nötig, den „nicht“-"
"Operator ``NOT`` und den „gleich“-Operator ``==`` als zwei separate "
"Operatoren zu verwenden. Wir hätten einfach den „ungleich“-Operator ``!=`` "
"wie folgt verwenden können:"

#: ../../Ch06/Ch06_DataHandling_2.rst:181
msgid "Applying logical operation to text"
msgstr "Logische Operationen auf Text anwenden"

#: ../../Ch06/Ch06_DataHandling_2.rst:183
msgid ""
"I also want to briefly point out that you can apply these logical operators "
"to text as well as to logical data. It’s just that we need to be a bit more "
"careful in understanding how jamovi interprets the different operations. In "
"this section I’ll talk about how the equal to operator ``==`` applies to "
"text, since this is the most important one. Obviously, the not equal to "
"operator ``!=`` gives the exact opposite answers to ``==`` so I’m implicitly "
"talking about that one too, but I won’t give specific commands showing the "
"use of ``!=``."
msgstr ""
"Ich möchte auch kurz darauf hinweisen, dass man diese logischen Operatoren "
"sowohl auf Text als auch auf logische Daten anwenden kann. Wir müssen nur "
"etwas vorsichtiger sein, um zu verstehen, wie jamovi die verschiedenen "
"Operationen interpretiert. In diesem Abschnitt werde ich darüber sprechen, "
"wie der Gleichheitsoperator ``==`` auf Text angewendet wird, da dies der "
"wichtigste Operator ist. Offensichtlich gibt der ungleich-Operator ``!=`` "
"genau die gegenteiligen Antworten zu ``==``, so dass ich implizit auch über "
"diesen spreche, aber ich werde keine spezifischen Befehle verwenden, welche "
"die Verwendung von ``!=`` zeigen."

#: ../../Ch06/Ch06_DataHandling_2.rst:192
msgid ""
"Okay, let’s see how it works. In one sense, it’s very simple. For instance, "
"I can ask jamovi if the word ``cat`` is the same as the word ``dog``, like "
"this:"
msgstr ""
"Okay, sehen wir uns an, wie es funktioniert. In einer Hinsicht ist es sehr "
"einfach. Ich kann zum Beispiel jamovi fragen, ob das Wort ``cat`` dasselbe "
"ist wie das Wort ``dog``, zum Beispiel so:"

#: ../../Ch06/Ch06_DataHandling_2.rst:200
msgid ""
"That’s pretty obvious, and it’s good to know that even jamovi can figure "
"that out. Similarly, jamovi does recognise that a ``cat`` is a ``cat``:"
msgstr ""
"Das ist ziemlich offensichtlich, aber es ist gut zu wissen, dass sogar "
"jamovi das herausfinden kann. In ähnlicher Weise erkennt jamovi, dass eine "
"``cat`` eine ``cat`` ist:"

#: ../../Ch06/Ch06_DataHandling_2.rst:207
msgid ""
"Again, that’s exactly what we’d expect. However, what you need to keep in "
"mind is that jamovi is not at all tolerant when it comes to grammar and "
"spacing. If two strings differ in any way whatsoever, jamovi will say that "
"they’re not equal to each other, as with the following:"
msgstr ""
"Auch das ist genau das, was wir erwarten würden. Was Sie jedoch beachten "
"müssen, ist, dass jamovi überhaupt nicht tolerant ist, wenn es um Grammatik "
"und Abstände geht. Wenn sich zwei Zeichenketten in irgendeiner Weise "
"unterscheiden, wird jamovi sagen, dass sie nicht gleich sind, wie zum "
"Beispiel im folgenden Fall:"

#: ../../Ch06/Ch06_DataHandling_2.rst:218
msgid ""
"You can also use other logical operators too. For instance jamovi also "
"allows you to use the ``<`` and ``>`` operators to determine which of two "
"text “strings” comes first, alphabetically speaking. Sort of. Actually, it’s "
"a bit more complicated than that, but let’s start with a simple example:"
msgstr ""
"Sie können auch andere logische Operatoren verwenden. Mit jamovi können Sie "
"zum Beispiel auch die Operatoren ``<`` und ``>`` verwenden, um zu bestimmen, "
"welcher von zwei Text-„Strings“ alphabetisch an erster Stelle steht. So in "
"etwa. Eigentlich ist es ein bisschen komplizierter, aber fangen wir mit "
"einem einfachen Beispiel an:"

#: ../../Ch06/Ch06_DataHandling_2.rst:228
msgid ""
"In jamovi, this example evaluates to ``TRUE``. This is because ``cat`` does "
"does come before ``dog`` alphabetically, so jamovi judges the statement to "
"be true. However, if we ask jamovi to tell us if ``cat`` comes before "
"``anteater`` then it will evaluate the expression as ``FALSE``. So far, so "
"good. But text data is a bit more complicated than the dictionary suggests. "
"What about ``cat`` and ``CAT``? Which of these comes first? Try it and find "
"out:"
msgstr ""
"In jamovi wird dieses Beispiel als ``TRUE`` ausgewertet. Das liegt daran, "
"dass ``cat`` alphabetisch vor ``dog`` steht, so dass jamovi die Aussage für "
"wahr hält. Wenn wir jedoch jamovi bitten, uns zu sagen, ob ``cat`` vor "
"``anteater`` steht, dann wird es den Ausdruck als ``FALSE`` bewerten. So "
"weit, so gut. Aber Textdaten sind ein bisschen komplizierter, als das "
"Wörterbuch vermuten lässt. Was ist mit ``cat`` und ``CAT``? Welcher dieser "
"Ausdrücke kommt zuerst? Probieren Sie es aus und finden Sie es heraus:"

#: ../../Ch06/Ch06_DataHandling_2.rst:240
msgid ""
"This in fact evaluates to ``TRUE``. In other words, jamovi assumes that "
"uppercase letters come before lowercase ones. Fair enough. No-one is likely "
"to be surprised by that. What you might find surprising is that jamovi "
"assumes that *all* uppercase letters come before *all* lowercase ones. That "
"is, while ``\"anteater\" < \"zebra\"`` is a true statement, and the "
"uppercase equivalent ``\"ANTEATER\" < \"ZEBRA\"`` is also true, it is *not* "
"true to say that ``\"anteater\" < \"ZEBRA\"``, as the following extract "
"illustrates. Try this:"
msgstr ""
"Dies ergibt in der Tat ``TRUE``. Mit anderen Worten: jamovi geht davon aus, "
"dass Großbuchstaben vor Kleinbuchstaben kommen. Das ist in Ordnung. Das wird "
"wohl niemanden überraschen. Was Sie vielleicht überraschen könnte, ist, dass "
"jamovi davon ausgeht, dass *alle* Großbuchstaben vor *allen* Kleinbuchstaben "
"kommen. Das heißt, während ``\"anteater\" < \"zebra\"`` eine wahre Aussage "
"ist, und das Äquivalent in Großbuchstaben ``\"ANTEATER\" < \"ZEBRA\"`` "
"ebenfalls wahr ist, ist es *nicht* wahr, zu sagen, dass ``\"anteater\" < "
"\"ZEBRA\"``, wie der folgende Auszug zeigt. Versuchen Sie dies:"

#: ../../Ch06/Ch06_DataHandling_2.rst:253
msgid ""
"This evaluates to ``FALSE``, and this may seem slightly counterintuitive. "
"With that in mind, it may help to have a quick look at the various text "
"characters in the order that jamovi processes them:"
msgstr ""
"Die Auswertung ergibt ``FALSE``, was etwas kontraintuitiv erscheinen mag. "
"Vor diesem Hintergrund kann es hilfreich sein, einen kurzen Blick auf die "
"verschiedenen Textzeichen in der Reihenfolge zu werfen, in der sie von "
"jamovi verarbeitet werden:"

#: ../../Ch06/Ch06_DataHandling_2.rst:266
msgid ""
"I offer up my teenage attempts to be “cool” as evidence that some things "
"just can’t be done."
msgstr ""
"Ich biete meine jugendlichen Versuche, „cool“ zu sein, als Beweis dafür an, "
"dass manche Dinge einfach nicht machbar sind."

#: ../../Ch06/Ch06_DataHandling_2.rst:270
msgid ""
"You can do this in the Compute new variable screen, though just calculating "
"``2 + 2`` for every cell of a new variable is not very useful!"
msgstr ""
"Sie können dies im Eingabefeld „Compute new variable“ tun, obwohl die "
"Berechnung von ``2 + 2`` für jede Zelle einer neuen Variablen nicht sehr "
"nützlich ist!"

#: ../../Ch06/Ch06_DataHandling_2.rst:275
msgid ""
"Note that this is a very different operator to the equals operator ``=``. A "
"common typo that people make when trying to write logical commands in jamovi "
"(or other languages, since the “``=`` versus ``==``” distinction is "
"important in many computer and statistical programs) is to accidentally type "
"``=`` when you really mean ``==``. Be especially cautious with this, I’ve "
"been programming in various languages since I was a teenager and I *still* "
"screw this up a lot. Hmm. I think I see why I wasn’t cool as a teenager. And "
"why I’m still not cool."
msgstr ""
"Beachten Sie, dass dies ein ganz anderer Operator ist als der "
"Gleichheitsoperator ``=``. Ein häufiger Tippfehler, den Leute machen, wenn "
"sie versuchen, logische Befehle in jamovi zu schreiben (oder in anderen "
"Sprachen: die Unterscheidung „``=`` versus ``==``“ ist in vielen Computer- "
"und Statistikprogrammen wichtig), ist es, versehentlich ``=`` zu schreiben, "
"wenn man eigentlich ``==`` meint. Seien Sie dabei besonders vorsichtig. Ich "
"programmiere in verschiedenen Sprachen, seit ich ein Teenager war, und ich "
"vermassle das *immer noch* ziemlich oft. Ich glaube, ich weiß jetzt, warum "
"ich als Teenager nicht cool war. Und warum ich immer noch nicht cool bin."

#: ../../Ch06/Ch06_DataHandling_2.rst:286
msgid ""
"Now, here’s a quirk in jamovi. When you have simple logical expressions like "
"the ones we have already met, e.g. ``2 + 2 == 5`` then jamovi neatly states "
"``FALSE`` (or ``TRUE``) in the corresponding spreadsheet column. Underneath "
"the hood, jamovi stores ``FALSE`` as ``0`` and ``TRUE`` as ``1``. When we "
"have more complex logical expressions, such as ``(2 + 2 == 4) or (2 + 2 == "
"5)``, then jamovi just displays either ``0`` or ``1``, depending whether the "
"logical expression is evaluated as false, or true."
msgstr ""
"Nun, hier ist eine Eigenart von jamovi. Wenn Sie einfache logische Ausdrücke "
"haben, wie die, welche wir bereits kennengelernt haben, z.B. ``2 + 2 == 5``, "
"dann gibt jamovi ordentlich ``FALSE`` (oder ``TRUE``) in der entsprechenden "
"Spalte der Tabellenkalkulation an. Unter der Haube speichert jamovi "
"``FALSE`` als ``0`` und ``TRUE`` als ``1``. Wenn wir komplexere logische "
"Ausdrücke haben, wie ``(2 + 2 == 4) or (2 + 2 == 5)``, dann zeigt jamovi "
"entweder ``0`` oder ``1`` an, je nachdem, ob der logische Ausdruck als "
"falsch oder wahr bewertet wird."

#: ../../Ch06/Ch06_DataHandling_3.rst:4
msgid "Transforming and recoding a variable"
msgstr "Transformieren und Umkodieren einer Variablen"

#: ../../Ch06/Ch06_DataHandling_3.rst:6
msgid ""
"It’s not uncommon in real world data analysis to find that one of your "
"variables isn’t quite equivalent to the variable that you really want. For "
"instance, it’s often convenient to take a continuous variable |continuous| "
"(e.g., age) and break it up into a smallish number of categories (e.g., "
"younger, middle, older). At other times, you may need to convert a numeric "
"variable into a different numeric variable (e.g., you may want to analyse at "
"the absolute value of the original variable). In this section I’ll describe "
"a few key ways you can do these things in jamovi."
msgstr ""
"Bei der Datenanalyse in der Praxis kommt es oft vor, dass eine Ihrer "
"Variablen nicht mit der Variable, die Sie eigentlich haben wollen, "
"gleichwertig ist. Zum Beispiel ist es oft praktisch, eine kontinuierliche "
"Variable |continuous| (z. B. das Alter) in eine kleinere Anzahl von "
"Kategorien (z. B. jünger, mittel, älter) aufzuteilen. In anderen Fällen kann "
"es erforderlich sein, eine numerische Variable in eine andere numerische "
"Variable umzuwandeln (z. B. wenn Sie den absoluten Wert der ursprünglichen "
"Variable analysieren möchten). In diesem Abschnitt beschreibe ich einige "
"Möglichkeiten, wie Sie diese Dinge in jamovi tun können."

#: ../../Ch06/Ch06_DataHandling_3.rst:298
msgid "continuous"
msgstr "continuous"

#: ../../Ch06/Ch06_DataHandling_3.rst:16
msgid "Creating a transformed variable"
msgstr "Erstellen einer transformierten Variablen"

#: ../../Ch06/Ch06_DataHandling_3.rst:18
msgid ""
"The first trick to discuss is the idea of **transforming** a variable. Taken "
"literally, *anything* you do to a variable is a transformation, but in "
"practice what it usually means is that you apply a relatively simple "
"mathematical function to the original variable in order to create a new "
"variable that either (a) provides a better way of describing the thing "
"you’re actually interested in, or (b) is more closely in agreement with the "
"assumptions of the statistical tests you want to do. Since, at this stage, I "
"haven’t talked about statistical tests or their assumptions, I’ll show you "
"an example based on the first case."
msgstr ""
"Der erste Trick, den wir besprechen wollen, ist die Idee der "
"**Transformation** einer Variablen. Streng genommen ist *alles*, was Sie mit "
"einer Variablen machen, eine Transformation, aber in der Praxis bedeutet es "
"meistens, dass Sie eine relativ einfache mathematische Funktion auf die "
"ursprüngliche Variable anwenden, um eine neue Variable zu erzeugen, die "
"entweder (a) die Sache, an der Sie eigentlich interessiert sind, besser "
"beschreibt oder (b) besser mit den Annahmen der statistischen Tests "
"übereinstimmt, die Sie durchführen wollen. Da ich in diesem Stadium noch "
"nicht über statistische Tests und ihre Annahmen gesprochen habe, zeige ich "
"Ihnen ein Beispiel für den ersten Fall."

#: ../../Ch06/Ch06_DataHandling_3.rst:28
msgid ""
"Suppose I’ve run a short study in which I ask 10 people a single question:"
msgstr ""
"Angenommen, ich habe eine kurze Studie durchgeführt, in der ich 10 Personen "
"eine einzige Frage gestellt habe:"

#: ../../Ch06/Ch06_DataHandling_3.rst:31
msgid ""
"On a scale of 1 (strongly disagree) to 7 (strongly agree), to what extent do "
"you agree with the proposition that “Dinosaurs are awesome”?"
msgstr ""
"Inwieweit stimmst du der Aussage zu, dass „Dinosaurier fantastisch sind“? "
"Benutze eine Skala von 1 (stimme überhaupt nicht zu) bis 7 (stimme voll und "
"ganz zu)."

#: ../../Ch06/Ch06_DataHandling_3.rst:35
msgid ""
"Now let’s load and look at the data. The |likert|_ data set contains a "
"single variable that contains raw Likert-scale responses for these 10 "
"people. However, if you think about it, this isn’t the best way to represent "
"these responses. Because of the fairly symmetric way that we set up the "
"response scale, there’s a sense in which the midpoint of the scale should "
"have been coded as 0 (no opinion), and the two endpoints should be **+3** "
"(strongly agree) and **-3** (strongly disagree). By recoding the data in "
"this way it’s a bit more reflective of how we really think about the "
"responses. The recoding here is pretty straightforward, we just subtract 4 "
"from the raw scores. In jamovi you can do this by computing a new variable: "
"click on the ``Compute`` button in the ``Data`` tab and you will see that a "
"new variable has been added to the spreadsheet. Let’s call this new variable "
"``likert.centred`` (go ahead and type that in) and then add the following in "
"the formula box, like in :numref:`fig-likertraw`: ``likert.raw - 4``"
msgstr ""
"Lassen Sie uns nun die Daten laden und betrachten. Der Datensatz |likert|_ "
"enthält eine einzelne Variable, welche die rohen Antworten auf der Likert-"
"Skala für diese 10 Personen enthält. Wenn Sie jedoch darüber nachdenken, ist "
"dies nicht die beste Art, diese Antworten darzustellen. Aufgrund der relativ "
"symmetrischen Art und Weise, wie wir die Antwortskala aufgebaut haben, "
"sollte der Mittelpunkt der Skala als 0 (keine Meinung) kodiert werden, und "
"die beiden Endpunkte sollten **+3** (stimme voll und ganz zu) und **-3** "
"(stimme überhaupt nicht zu) lauten. Durch eine Umkodierung der Daten wird "
"ein wenig besser widergespiegelt, wie wir wirklich über die Antworten "
"denken. Die Umkodierung ist ziemlich einfach: Wir ziehen einfach 4 von den "
"Rohwerten ab. In jamovi können Sie dies tun, indem Sie eine neue Variable "
"berechnen: Klicken Sie auf die Schaltfläche ``Compute`` in der Registerkarte "
"``Data`` und Sie werden sehen, dass eine neue Variable zur Datentabelle "
"hinzugefügt wurde. Nennen wir diese neue Variable ``likert.centred`` (geben "
"Sie das ruhig ein) und fügen Sie dann in das Formel-Feld Folgendes ein: "
"``likert.raw - 4`` (wie in :numref:`fig-likertraw` gezeigt)."

#: ../../Ch06/Ch06_DataHandling_3.rst:52 ../../Ch06/Ch06_DataHandling_3.rst:56
msgid "Creating a new computed variable in jamovi"
msgstr "Erstellen einer neuen berechneten Variablen in jamovi"

#: ../../Ch06/Ch06_DataHandling_3.rst:60
msgid ""
"One reason why it might be useful to have the data in this format is that "
"there are a lot of situations where you might prefer to analyse the "
"*strength* of the opinion separately from the *direction* of the opinion. We "
"can do two different transformations on this ``likert.centred`` variable in "
"order to distinguish between these two different concepts. First, to compute "
"an ``opinion.strength`` variable, we want to take the absolute value of the "
"centred data (using the ``ABS`` function).\\ [#]_ In jamovi, create another "
"new variable using the ``Compute`` button. Name the variable ``opinion."
"strength`` and this time click on the *f*\\ :sub:`x` button next to the "
"``Formula`` box. This shows the different ``Functions`` and ``Variables`` "
"that you can add to the ``Formula`` box, so double click on ``ABS`` and then "
"double click on ``likert.centred`` and you will see that the ``Formula`` box "
"is populated with ``ABS(likert.centred)`` and a new variable has been "
"created in the spreadsheet view, as in :numref:`fig-opinionstrength`:"
msgstr ""
"Ein Grund, warum es nützlich sein könnte, die Daten in diesem Format "
"vorliegen zu haben, ist, dass es viele Situationen gibt, in denen man es "
"vorzieht, die *Stärke* der Meinung getrennt von der *Richtung* der Meinung "
"zu analysieren. Wir können zwei verschiedene Transformationen an dieser "
"``likert.centred`` Variable vornehmen, um zwischen diesen beiden "
"unterschiedlichen Konzepten zu unterscheiden. Erstens, um eine ``opinion."
"strength`` Variable zu berechnen, wollen wir den absoluten Wert der "
"zentrierten Daten berechnen (mit der ``ABS``-Funktion).\\ [#]_ In jamovi, "
"erstellen Sie eine weitere neue Variable mit der ``Compute`` Schaltfläche. "
"Nennen Sie die Variable ``opinion.strength`` und klicken Sie dieses Mal auf "
"die Schaltfläche *f*\\ :sub:`x` neben dem Feld ``Formula``. Dies zeigt die "
"verschiedenen ``Functions`` und ``Variables``, die Sie zum Feld ``Formula`` "
"hinzufügen können. Doppelklicken Sie auf ``ABS`` und dann doppelklicken Sie "
"auf ``likert.centred`` und Sie werden sehen, dass das Feld ``Formula`` nun "
"mit ``ABS(likert.centred)`` gefüllt ist und eine neue Variable in der "
"Tabellenansicht erstellt wurde (wie in :numref:`fig-opinionstrength` "
"gezeigt):"

#: ../../Ch06/Ch06_DataHandling_3.rst:78
msgid "*f*\\ :sub:`x` button to select functions and variables"
msgstr "*f*\\ :sub:`x`-Taste zur Auswahl von Funktionen und Variablen"

#: ../../Ch06/Ch06_DataHandling_3.rst:82
msgid "Using the *f*\\ :sub:`x` button to select functions and variables"
msgstr "Auswählen von Funktionen und Variablen mit der *f*\\ :sub:`x`-Taste"

#: ../../Ch06/Ch06_DataHandling_3.rst:86
msgid ""
"Second, to compute a variable that contains only the direction of the "
"opinion and ignores the strength, we want to calculate the “sign” of the "
"variable. In jamovi we can use the ``IF`` function to do this. Create "
"another new variable using the ``Compute`` button, name this one ``opinion."
"sign``, and then type the following into the function box:"
msgstr ""
"Um eine Variable zu berechnen, die nur die Richtung der Meinung enthält und "
"die Stärke ignoriert, wollen wir das „Vorzeichen“ der Variable berechnen. In "
"jamovi können wir dazu die Funktion ``IF`` verwenden. Erstellen Sie eine "
"weitere neue Variable mit der Schaltfläche ``Compute`` und nennen Sie diese "
"``opinion.sign``. Geben Sie dann Folgendes in das Funktionsfeld ein:"

#: ../../Ch06/Ch06_DataHandling_3.rst:96
msgid ""
"When done, you’ll see that all negative numbers from the ``likert.centred`` "
"variable are converted to **-1**, all positive numbers are converted to "
"**1** and zero stays as **0**, like so:"
msgstr ""
"Danach werden Sie sehen, dass alle negativen Zahlen aus der Variablen "
"``likert.centred`` in **-1** umgewandelt werden, alle positiven Zahlen in "
"**1** und die Null bleibt als **0** erhalten, so wie hier:"

#: ../../Ch06/Ch06_DataHandling_3.rst:104
msgid ""
"Let’s break down what this ``IF`` command is doing. In jamovi there are "
"three parts to an ``IF`` statement, written as ``IF(expression, value, "
"else)``. The first part, ``expression`` can be a logical or mathematical "
"statement. In our example, we have specified ``likert.centred == 0``, which "
"is ``TRUE`` for values where ``likert.centred`` is zero. The next part, "
"``value``, is the new value where the expression in part one is ``TRUE``. In "
"our example, we have said that for all those values where ``likert.centred`` "
"is zero, keep them zero. In the next part, ``else``, we can enter another "
"logical or mathematical statement to be used if part one evaluates to "
"``FALSE``, i.e. where ``likert.centred`` is not zero. In our example we have "
"divided ``likert.centred`` by opinion.strength to give ``-1`` or ``+1`` "
"depending of the sign of the original value in ``likert.centred``.\\ [#]_"
msgstr ""
"Lassen Sie uns aufschlüsseln, was dieser ``IF`` Befehl tut. In jamovi gibt "
"es drei Teile einer ``IF``-Anweisung, geschrieben als ``IF(expression, "
"value, else)``. Der erste Teil, ``expression``, kann eine logische oder "
"mathematische Anweisung sein. In unserem Beispiel haben wir ``likert.centred "
"== 0`` angegeben, was ``TRUE`` für Werte ist, bei denen ``likert.centred`` "
"gleich Null ist. Der nächste Teil, ``value``, ist der neue Wert, bei dem der "
"Ausdruck im ersten Teil ``TRUE`` lautet. In unserem Beispiel haben wir "
"gesagt, dass alle Werte, bei denen ``likert.centred`` gleich Null ist, auf "
"Null bleiben sollen. Im nächsten Teil, ``else``, können wir eine weitere "
"logische oder mathematische Aussage eingeben, die verwendet wird, wenn der "
"erste Teil ``FALSE`` ergibt, d.h. wenn ``likert.centred`` ungleich Null ist. "
"In unserem Beispiel haben wir ``likert.centred`` durch Meinungsstärke "
"geteilt, um ``-1`` oder ``+1`` zu erhalten, je nach dem Vorzeichen des "
"ursprünglichen Wertes in ``likert.centred``.\\ [#]_"

#: ../../Ch06/Ch06_DataHandling_3.rst:117
msgid ""
"And we’re done. We now have three shiny new variables, all of which are "
"useful transformations of the original ``likert.raw`` variable."
msgstr ""
"Und schon sind wir fertig. Wir haben jetzt drei glänzende neue Variablen, "
"die alle nützliche Transformationen der ursprünglichen ``likert.raw`` "
"Variable sind."

#: ../../Ch06/Ch06_DataHandling_3.rst:121
msgid ""
"Collapsing a variable into a smaller number of discrete levels or categories"
msgstr ""
"Zerlegen einer Variablen in eine geringere Anzahl diskreter Ebenen oder "
"Kategorien"

#: ../../Ch06/Ch06_DataHandling_3.rst:123
msgid ""
"One pragmatic task that comes up quite often is the problem of collapsing a "
"variable into a smaller number of discrete levels or categories. For "
"instance, suppose I’m interested in looking at the age distribution of "
"people at a social gathering:"
msgstr ""
"Eine Aufgabe, die sich häufig stellt, ist das Problem, eine Variable in eine "
"geringere Anzahl von diskreten Ebenen oder Kategorien zu zerlegen. Nehmen "
"wir zum Beispiel an, ich möchte die Altersverteilung der Teilnehmer an einer "
"gesellschaftlichen Veranstaltung untersuchen:"

#: ../../Ch06/Ch06_DataHandling_3.rst:132
msgid ""
"In some situations it can be quite helpful to group these into a smallish "
"number of categories. For example, we could group the data into three broad "
"categories: young (0-20), adult (21-40) and older (41-60). This is a quite "
"coarse-grained classification, and the labels that I’ve attached only make "
"sense in the context of this data set (e.g., viewed more generally, a 42 "
"year old wouldn’t consider themselves as “older”). We can slice this "
"variable up quite easily using the jamovi ``IF`` function that we have "
"already used. This time we have to specify nested ``IF`` statements, meaning "
"simply that ``IF`` the first logical expression is ``TRUE``, insert a first "
"value, but ``IF`` a second logical expression is ``TRUE``, insert a second "
"value, but ``IF`` a third logical expression is ``TRUE``, then insert a "
"third value. This can be written as:"
msgstr ""
"In vielen Situationen ist es hilfreich, die Daten in Kategorien einzuteilen. "
"Wir könnten die Daten zum Beispiel in drei große Kategorien einteilen: jung "
"(0-20), erwachsen (21-40) und älter (41-60). Dies ist eine recht grobkörnige "
"Klassifizierung, und die Bezeichnungen, die ich angebracht habe, machen nur "
"im Kontext dieses Datensatzes Sinn (z.B. würde sich ein 42-Jähriger, "
"allgemein betrachtet, nicht als „älter“ betrachten). Wir können diese "
"Variable ganz einfach mit den jamovi ``IF’ function that we have already "
"used. This time we have to specify nested ‘IF`` Anweisungen aufteilen, was "
"einfach bedeutet, dass ``IF`` der erste logische Ausdruck ``TRUE`` ist, ein "
"erster Wert eingefügt wird, aber ``IF`` ein zweiter logischer Ausdruck "
"``TRUE`` ist, ein zweiter Wert eingefügt wird, aber ``IF`` ein dritter "
"logischer Ausdruck ``TRUE`` ist, dann ein dritter Wert eingefügt wird. Dies "
"kann geschrieben werden als:"

#: ../../Ch06/Ch06_DataHandling_3.rst:149
msgid ""
"Note that there are three left parentheses used during the nesting, so the "
"whole statement has to end with three right parentheses otherwise you will "
"get an error message. The jamovi screen shot for this data manipulation, "
"along with an accompanying frequency table, is shown in :numref:`fig-"
"agecats`:"
msgstr ""
"Beachten Sie, dass bei der Verschachtelung drei linke Klammern verwendet "
"werden, so dass die gesamte Anweisung mit drei rechten Klammern enden muss, "
"sonst erhalten Sie eine Fehlermeldung. Der jamovi-Screenshot für diese "
"Datenmanipulation ist zusammen mit einer zugehörigen Häufigkeitstabelle in :"
"numref:`fig-agecats` zu sehen:"

#: ../../Ch06/Ch06_DataHandling_3.rst:157
msgid "Using the ``IF`` function"
msgstr "Verwendung der Funktion ``IF``"

#: ../../Ch06/Ch06_DataHandling_3.rst:161
msgid ""
"Collapsing a variable into a smaller number of discrete levels using the "
"jamovi ``IF`` function"
msgstr ""
"Zerlegen einer Variablen in eine kleinere Anzahl diskreter Stufen mit der "
"jamovi-Funktion ``IF``"

#: ../../Ch06/Ch06_DataHandling_3.rst:166
msgid ""
"It’s important to take the time to figure out whether or not the resulting "
"categories make any sense at all in terms of your research project. If they "
"don’t make any sense to you as meaningful categories, then any data analysis "
"that uses those categories is likely to be just as meaningless. More "
"generally, in practice I’ve noticed that people have a very strong desire to "
"carve their (continuous and messy) data into a few (discrete and simple) "
"categories, and then run analyses using the categorised data instead of the "
"original data.\\ [#]_ I wouldn’t go so far as to say that this is an "
"inherently bad idea, but it does have some fairly serious drawbacks at "
"times, so I would advise some caution if you are thinking about doing it."
msgstr ""
"Es ist wichtig, dass Sie sich die Zeit nehmen, um herauszufinden, ob die "
"resultierenden Kategorien für Ihr Forschungsprojekt überhaupt einen Sinn "
"ergeben oder nicht. Wenn sie für Sie als sinnvolle Kategorien keinen Sinn "
"ergeben, dann wird jede Datenanalyse, die diese Kategorien verwendet, "
"wahrscheinlich genauso sinnlos sein. Generell habe ich in der Praxis "
"festgestellt, dass die Leute ein sehr starkes Verlangen danach haben, ihre "
"(kontinuierlichen und unübersichtlichen) Daten in einige wenige (diskrete "
"und einfache) Kategorien zu zerlegen und dann Analysen unter Verwendung der "
"kategorisierten Daten anstelle der ursprünglichen Daten durchzuführen.\\ "
"[#]_ Ich würde nicht so weit gehen zu sagen, dass dies eine von Natur aus "
"schlechte Idee ist, aber es hat zuweilen einige ziemlich schwerwiegende "
"Nachteile, so dass ich zur Vorsicht raten würde, wenn Sie darüber "
"nachdenken, dies zu tun."

#: ../../Ch06/Ch06_DataHandling_3.rst:179
msgid "Creating a transformation that can be applied to multiple variables"
msgstr ""
"Erstellen einer Transformation, die auf mehrere Variablen angewendet werden "
"kann"

#: ../../Ch06/Ch06_DataHandling_3.rst:181
msgid ""
"Sometimes you want to apply the same transformation to more than one "
"variable, for example when you have multiple questionnaire items that all "
"need to be recalculated or recoded in the same way. And one of the neat "
"features in jamovi is that you can create a transformation, using the "
"``Transform`` button in the ``Data`` tab, that can then be saved and applied "
"to multiple variables. Let’s go back to the first example above, using the |"
"likert|_ data set that contains a single variable with raw Likert-scale "
"responses for 10 people. To create a transformation that you can save and "
"then apply across multiple variables (assuming you had more variables like "
"this in your data file), first in the spreadsheet editor select (i.e., "
"click) the variable you want to use to initially create the transformation. "
"In our example this is ``likert.raw``. Next click the ``Transform`` button "
"in the jamovi ``Data`` tab, and you’ll see something like :numref:`fig-"
"transform1`."
msgstr ""
"Manchmal möchte man dieselbe Transformation auf mehrere Variablen anwenden, "
"zum Beispiel wenn man mehrere Fragebogenelemente hat, die alle auf dieselbe "
"Weise neu berechnet oder umkodiert werden müssen. Eine der praktischen "
"Funktionen von jamovi ist, dass Sie mit der Schaltfläche ``Transform`` auf "
"der Registerkarte ``Data`` eine Transformation erstellen können, die dann "
"gespeichert und auf mehrere Variablen angewendet werden kann. Gehen wir "
"zurück zum ersten Beispiel oben, mit dem Datensatz |likert|_, der eine "
"einzelne Variable mit rohen Likert-Skalenantworten für 10 Personen enthält. "
"Um eine Transformation zu erstellen, die Sie speichern und dann auf mehrere "
"Variablen anwenden können (unter der Annahme, dass Sie mehrere solcher "
"Variablen in Ihrer Datendatei haben), wählen Sie zunächst im "
"Tabellenkalkulationseditor die Variable aus (d. h. Sie klicken auf die "
"„Titelzeile“ mit dem Variablennamen), die Sie für die ursprüngliche "
"Erstellung der Transformation verwenden möchten. In unserem Beispiel ist "
"dies ``likert.raw``. Klicken Sie dann auf die Schaltfläche ``Transform`` in "
"der Registerkarte jamovi ``Data``, und Sie werden eine Bildschirmausgabe "
"ähnlich :numref:`fig-transform1` sehen."

#: ../../Ch06/Ch06_DataHandling_3.rst:198
msgid "Using the jamovi ``Transform`` command"
msgstr "Verwendung des jamovi-Befehls ``Transform``"

#: ../../Ch06/Ch06_DataHandling_3.rst:202
msgid ""
"Creating a new variable transformation using the jamovi ``Transform`` command"
msgstr ""
"Erstellen einer neuen Variablentransformation mit dem jamovi-Befehl "
"``Transform``"

#: ../../Ch06/Ch06_DataHandling_3.rst:207
msgid ""
"Give your new variable a name, let’s call it ``opinion.strength`` and then "
"click on the ``Using transform`` selection box and select ``Create New "
"Transform…``. This is where you will create, and name, the transformation "
"that can be re-applied to as many variables as you like. The transformation "
"is automatically named for us as ``Transform 1`` (imaginative, huh. You can "
"change this if you like). Then type the expression ``ABS($source - 4)`` into "
"the function text box, as in :numref:`fig-transform2`, press Enter or Return "
"on your keyboard and, hey presto, you have created a new transformation and "
"applied it to the ``likert.raw`` variable! Good, eh. Note that instead of "
"using the variable label in the expression, we have instead used "
"``$source``. This is so that we can then use the same transformation with as "
"many different variables as we like - jamovi requires you to use ``$source`` "
"to refer to the source variable you are transforming. Your transformation "
"has also been saved and can be re-used any time you like (providing you save "
"the dataset as an ``.omv`` file, otherwise you’ll lose it!)."
msgstr ""
"Geben Sie Ihrer neuen Variablen einen Namen, nennen wir sie ``opinion."
"strength`` und klicken Sie dann auf das Auswahlfeld ``Using transform`` und "
"wählen Sie ``Create New Transform…``. Hier werden Sie die Transformation "
"erstellen und benennen, die auf beliebig viele Variablen angewendet werden "
"kann. Die Transformation wird für uns automatisch als ``Transform 1`` "
"benannt (einfallsreich, was? Sie können dies ändern, wenn Sie möchten). "
"Geben Sie dann den Ausdruck ``ABS($source - 4)`` in das Textfeld der "
"Funktion ein, wie in :numref:`fig-transform2`, drücken Sie Enter oder Return "
"auf Ihrer Tastatur und schon haben Sie eine neue Transformation erstellt und "
"auf die Variable ``likert.raw`` angewendet! Einfach, oder? Beachten Sie, "
"dass wir statt der Variablenbezeichnung im Ausdruck ``$source`` verwendet "
"haben. So können wir dieselbe Transformation auf beliebig viele verschiedene "
"Variablen anwenden - jamovi verlangt, dass Sie ``$source`` verwenden, um auf "
"die Quellvariable zu verweisen, die Sie transformieren. Ihre Transformation "
"wurde auch gespeichert und kann jederzeit wiederverwendet werden "
"(vorausgesetzt, Sie speichern den Datensatz als ``.omv`` Datei, sonst geht "
"er verloren)."

#: ../../Ch06/Ch06_DataHandling_3.rst:226
msgid "Specifying a transformation in jamovi"
msgstr "Spezifizieren einer Transformation in jamovi"

#: ../../Ch06/Ch06_DataHandling_3.rst:230
msgid ""
"Specifying a transformation in jamovi, to be saved as the imaginatively "
"named ``Transform 1``"
msgstr ""
"Festlegen einer Transformation in jamovi, die unter dem fantasievollen Namen "
"``Transform 1`` gespeichert werden soll"

#: ../../Ch06/Ch06_DataHandling_3.rst:235
msgid ""
"You can also create a transformation with the second example we looked at, "
"the age distribution of people at a social gathering. Go on, you know you "
"want to! Remember that we collapsed this variable into three groups: "
"younger, adult and older. This time we will achieve the same thing, but "
"using the jamovi ``Transform`` → ``Add condition`` button. With this data "
"set (go back to it or create it again if you didn’t save it) set up a new "
"variable transformation. Call the transformed variable ``AgeCats`` and the "
"transformation you will create ``Agegroupings``. Then click on the big ``+`` "
"sign next to the function box. This is the ``Add condition`` button and I’ve "
"stuck a big red arrow onto :numref:`fig-transform3` so you can see exactly "
"where this is. Re-create the transformation shown in :numref:`fig-"
"transform3` and when you have done, you will see the new values appear in "
"the spreadsheet window. What’s more, the ``Agegroupings`` transformation has "
"been saved and can be re-applied any time you like. Ok, so I know that it’s "
"unlikely you will have more than one ``Age`` variable, but you get the idea "
"now of how to set up transformations in jamovi, so you can follow this idea "
"with other sorts of variables. A typical scenario for this is when you have "
"a questionnaire scale with, say, 20 items (variables) and each item was "
"originally scored from 1 to 6 but, for some reason or quirk of the data you "
"decide to recode all the items as 1 to 3. You can easily do this in jamovi "
"by creating and then re-applying your transformation for each variable that "
"you want to recode."
msgstr ""
"Sie können auch das zweite Beispiel, das wir uns angesehen haben, nämlich "
"die Altersverteilung der Teilnehmer an einem gesellschaftlichen Treffen, "
"umwandeln. Nur zu, Sie wissen, dass Sie das wollen! Erinnern Sie sich daran, "
"dass wir diese Variable in drei Gruppen eingeteilt haben: Jüngere, "
"Erwachsene und Ältere. Diesmal werden wir das Gleiche tun, aber mit der "
"Schaltfläche jamovi ``Transform`` → ``Add condition``. Mit diesem Datensatz "
"(gehen Sie zu ihm zurück oder erstellen Sie ihn neu, wenn Sie ihn nicht "
"gespeichert haben) richten Sie eine neue Variablentransformation ein. Nennen "
"Sie die transformierte Variable ``AgeCats`` und die Transformation, die Sie "
"erstellen werden ``Agegroupings``. Klicken Sie dann auf das große ``+`` "
"Zeichen neben dem Funktionsfeld. Dies ist die Schaltfläche ``Add condition`` "
"und ich habe einen großen roten Pfeil auf :numref:`fig-transform3` geklebt, "
"damit Sie genau sehen können, wo sich diese befindet. Führen Sie die in :"
"numref:`fig-transform3` gezeigte Transformation erneut durch, und Sie werden "
"sehen, dass die neuen Werte im Tabellenfenster erscheinen. Darüber hinaus "
"wurde die Transformation ``Agegroupings`` gespeichert und kann jederzeit "
"wieder angewendet werden. Ok, ich weiß, dass Sie wahrscheinlich nicht mehr "
"als eine ``Age`` Variable haben werden, aber Sie haben jetzt eine "
"Vorstellung davon, wie man in jamovi Transformationen einrichtet, so dass "
"Sie diese Idee mit anderen Arten von Variablen verfolgen können. Ein "
"typisches Szenario ist, wenn Sie eine Fragebogenskala mit, sagen wir, 20 "
"Items (Variablen) haben und jedes Item ursprünglich von 1 bis 6 bewertet "
"wurde, Sie aber aus irgendeinem Grund oder einer Eigenart der Daten "
"beschließen, alle Items als 1 bis 3 umzukodieren. Sie können dies in jamovi "
"leicht tun, indem Sie Ihre Transformation für jede Variable, die Sie "
"umkodieren wollen, erstellen und dann erneut anwenden."

#: ../../Ch06/Ch06_DataHandling_3.rst:259
msgid "jamovi transformation into categories"
msgstr "Umwandeln in Kategorien in jamovi"

#: ../../Ch06/Ch06_DataHandling_3.rst:263
msgid ""
"jamovi transformation into three age categories, using the ``Add condition`` "
"button"
msgstr ""
"jamovi-Transformation in drei Alterskategorien, mit Hilfe der ``Add "
"condition`` Taste"

#: ../../Ch06/Ch06_DataHandling_3.rst:271
msgid ""
"The absolute value of a number is its distance from zero, regardless of "
"whether it’s sign is negative or positive."
msgstr ""
"Der Absolutwert einer Zahl ist ihr Abstand von Null, unabhängig davon, ob "
"sie ein negatives oder positives Vorzeichen hat."

#: ../../Ch06/Ch06_DataHandling_3.rst:275
msgid ""
"The reason we have to use the ``IF`` command and keep zero as zero is that "
"you cannot just use ``likert.centred / opinion.strength`` to calculate the "
"sign of ``likert.centred``, because mathematically dividing zero by zero "
"does not work. Try it and see."
msgstr ""
"Der Grund dafür, dass wir den Befehl ``IF`` verwenden und Null als Null "
"beibehalten müssen, ist, dass Sie nicht einfach ``likert.centred / opinion."
"strength`` verwenden können, um das Vorzeichen von ``likert.centred`` zu "
"berechnen, weil es mathematisch nicht funktioniert, Null durch Null zu "
"teilen. Versuchen Sie es und sehen Sie."

#: ../../Ch06/Ch06_DataHandling_3.rst:281
msgid ""
"If you’ve read further into the book, and are re-reading this section, then "
"a good example of this would be someone choosing to do an ANOVA using "
"``AgeCats`` as the grouping variable, instead of running a regression using "
"``Age`` as a predictor. There are sometimes good reasons for doing this. For "
"instance, if the relationship between ``Age`` and your outcome variable is "
"highly non-linear and you aren’t comfortable with trying to run non-linear "
"regression! However, unless you really do have a good rationale for doing "
"this, it’s best not to. It tends to introduce all sorts of other problems (e."
"g., the data will probably violate the normality assumption) and you can "
"lose a lot of statistical power."
msgstr ""
"Wenn Sie die weiteren Kapitel im Buch lesen und dann diesen Abschnitt erneut "
"lesen, dann wäre ein gutes Beispiel dafür, dass jemand eine ANOVA mit "
"``AgeCats`` als Gruppierungsvariable durchführt, anstatt eine Regression mit "
"``Age`` als Prädiktor. Manchmal gibt es gute Gründe für diese "
"Vorgehensweise. Zum Beispiel, wenn die Beziehung zwischen ``Age`` und Ihrer "
"Ergebnisvariablen hochgradig nicht-linear ist und Sie sich nicht wohl dabei "
"fühlen, eine nicht-lineare Regression durchzuführen! Es ist jedoch besser, "
"dies nicht zu tun, es sei denn, Sie haben wirklich einen guten Grund dafür, "
"dies zu tun. Es führt in der Regel zu allen möglichen anderen Problemen (z. "
"B. werden die Daten wahrscheinlich die Annahme der Normalverteilung "
"verletzen) und Sie können viel statistische Aussagekraft verlieren."

#: ../../Ch06/Ch06_DataHandling_4.rst:4
msgid "Mathematical functions and operations"
msgstr "Mathematische Funktionen und Operationen"

#: ../../Ch06/Ch06_DataHandling_4.rst:6
msgid ""
"In the previous section, I discussed the ideas behind variable "
"transformations and showed that a lot of the transformations that you might "
"want to apply to your data are based on fairly simple mathematical functions "
"and operations. In this section I want to return to that discussion and "
"mention several other mathematical functions and arithmetic operations that "
"are actually quite useful for a lot of real world data analysis. :numref:"
"`tab-mathfunc` gives a brief overview of the various mathematical functions "
"I want to talk about here, or later.\\ [#]_ Obviously this doesn’t even come "
"close to cataloguing the range of possibilities available, but it does cover "
"a range of functions that are used regularly in data analysis and that are "
"available in jamovi."
msgstr ""
"Im vorigen Abschnitt habe ich die Ideen hinter den Variablentransformationen "
"erörtert und gezeigt, dass viele der Transformationen, die Sie auf Ihre "
"Daten anwenden möchten, auf recht einfachen mathematischen Funktionen und "
"Operationen beruhen. In diesem Abschnitt möchte ich auf diese Diskussion "
"zurückkommen und einige andere mathematische Funktionen und arithmetische "
"Operationen erwähnen, die für viele Datenanalysen sehr nützlich sein "
"können. :numref:`tab-mathfunc` gibt einen kurzen Überblick über die "
"verschiedenen mathematischen Funktionen, über die ich hier oder später "
"sprechen möchte.\\ [#]_ Natürlich reicht dies nicht einmal annähernd aus, um "
"die Bandbreite der verfügbaren Möglichkeiten zu katalogisieren, aber es "
"deckt eine Reihe von Funktionen ab, die regelmäßig in der Datenanalyse "
"verwendet werden und die in jamovi verfügbar sind."

#: ../../Ch06/Ch06_DataHandling_4.rst:17
msgid "Some of the mathematical functions available in jamovi"
msgstr "Einige der in jamovi verfügbaren mathematischen Funktionen"

#: ../../Ch06/Ch06_DataHandling_4.rst:21
msgid "Function"
msgstr "Funktion"

#: ../../Ch06/Ch06_DataHandling_4.rst:21
msgid "Example input"
msgstr "Beispiel-Eingabe"

#: ../../Ch06/Ch06_DataHandling_4.rst:21
msgid "result"
msgstr "Ausgabe"

#: ../../Ch06/Ch06_DataHandling_4.rst:23
msgid "Square root"
msgstr "Quadratwurzel"

#: ../../Ch06/Ch06_DataHandling_4.rst:23
msgid "``SQRT(x)``"
msgstr "``SQRT(x)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:23
msgid "``SQRT(25)``"
msgstr "``SQRT(25)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:23
msgid "5"
msgstr "5"

#: ../../Ch06/Ch06_DataHandling_4.rst:25
msgid "Absolute value"
msgstr "Absoluter Wert"

#: ../../Ch06/Ch06_DataHandling_4.rst:25
msgid "``ABS(x)``"
msgstr "``ABS(x)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:25
msgid "``ABS(-23)``"
msgstr "``ABS(-23)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:25
msgid "23"
msgstr "23"

#: ../../Ch06/Ch06_DataHandling_4.rst:27
msgid "Logarithm (base 10)"
msgstr "Logarithmus (zur Basis 10)"

#: ../../Ch06/Ch06_DataHandling_4.rst:27
msgid "``LOG10(x)``"
msgstr "``LOG10(x)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:27
msgid "``LOG10(1000)``"
msgstr "``LOG10(1000)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:27
msgid "3"
msgstr "3"

#: ../../Ch06/Ch06_DataHandling_4.rst:30
msgid "Logarithm (base *e*)"
msgstr "Logarithmus (zur Basis *e*)"

#: ../../Ch06/Ch06_DataHandling_4.rst:30
msgid "``LN(x)``"
msgstr "``LN(x)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:30
msgid "``LN(1000)``"
msgstr "``LN(1000)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:30
msgid "6.908"
msgstr "6.908"

#: ../../Ch06/Ch06_DataHandling_4.rst:33
msgid "Exponentiation"
msgstr "Potenzierung"

#: ../../Ch06/Ch06_DataHandling_4.rst:33
msgid "``EXP(x)``"
msgstr "``EXP(x)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:33
msgid "``EXP(6.908)``"
msgstr "``EXP(6.908)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:33
msgid "1000.245"
msgstr "1000.245"

#: ../../Ch06/Ch06_DataHandling_4.rst:35
msgid "Box-Cox"
msgstr "Box-Cox-Transformation"

#: ../../Ch06/Ch06_DataHandling_4.rst:35
msgid "``BOXCOX(x, lamda)``"
msgstr "``BOXCOX(x, lamda)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:35
msgid "``BOXCOX(6.908, 3)``"
msgstr "``BOXCOX(6.908, 3)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:35
msgid "109.551"
msgstr "109.551"

#: ../../Ch06/Ch06_DataHandling_4.rst:37
msgid "Rounding to nearest"
msgstr "Runden zur nächsten Ganzzahl"

#: ../../Ch06/Ch06_DataHandling_4.rst:37
msgid "``ROUND()``"
msgstr "``ROUND()``"

#: ../../Ch06/Ch06_DataHandling_4.rst:37
msgid "``ROUND(1.32)``"
msgstr "``ROUND(1.32)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:37 ../../Ch06/Ch06_DataHandling_4.rst:40
msgid "1"
msgstr "1"

#: ../../Ch06/Ch06_DataHandling_4.rst:40
msgid "Rounding down"
msgstr "Abrunden"

#: ../../Ch06/Ch06_DataHandling_4.rst:40
msgid "``FLOOR()``"
msgstr "``FLOOR()``"

#: ../../Ch06/Ch06_DataHandling_4.rst:40
msgid "``FLOOR(1.32)``"
msgstr "``FLOOR(1.32)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:42
msgid "Rounding up"
msgstr "Aufrunden"

#: ../../Ch06/Ch06_DataHandling_4.rst:42
msgid "``CEILING()``"
msgstr "``CEILING()``"

#: ../../Ch06/Ch06_DataHandling_4.rst:42
msgid "``CEILING(1.32)``"
msgstr "``CEILING(1.32)``"

#: ../../Ch06/Ch06_DataHandling_4.rst:42
msgid "2"
msgstr "2"

#: ../../Ch06/Ch06_DataHandling_4.rst:47
msgid "Logarithms and exponentials"
msgstr "Logarithmen und Exponentialfunktionen"

#: ../../Ch06/Ch06_DataHandling_4.rst:49
msgid ""
"As I’ve mentioned earlier, jamovi has an useful range of mathematical "
"functions built into it and there really wouldn’t be much point in trying to "
"describe or even list all of them. For the most part, I’ve focused only on "
"those functions that are strictly necessary for this book. However I do want "
"to make an exception for logarithms and exponentials. Although they aren’t "
"needed anywhere else in this book, they are *everywhere* in statistics more "
"broadly. And not only that, there are a *lot* of situations in which it is "
"convenient to analyse the logarithm of a variable (i.e., to take a “log-"
"transform” of the variable). I suspect that many (maybe most) readers of "
"this book will have encountered logarithms and exponentials before, but from "
"past experience I know that there’s a substantial proportion of students who "
"take a social science statistics class who haven’t touched logarithms since "
"high school, and would appreciate a bit of a refresher."
msgstr ""
"Wie ich bereits erwähnt habe, verfügt jamovi über eine ganze Reihe "
"nützlicher mathematischer Funktionen, und es hätte wirklich keinen Sinn, sie "
"alle zu beschreiben oder gar aufzulisten. Zum größten Teil habe ich mich auf "
"die Funktionen konzentriert, die für dieses Buch notwendig sind. Ich möchte "
"jedoch eine Ausnahme für Logarithmen und Exponentialfunktionen machen. "
"Obwohl sie in diesem Buch nirgendwo anders benötigt werden, erscheinen sie "
"*überall* in der Statistik. Und nicht nur das, es gibt *viele* Situationen, "
"in denen es praktisch ist, den Logarithmus einer Variablen zu analysieren "
"(d. h. eine „Logarithmus-Transformation“ der Variablen vorzunehmen). Ich "
"vermute, dass viele (vielleicht die meisten) Leser dieses Buches schon "
"einmal mit Logarithmen und Exponentialfunktionen in Berührung gekommen sind. "
"Aber aus Erfahrung weiß ich, dass es einen beträchtlichen Anteil von "
"Studenten gibt, die einen Statistik-Kurs in den Sozialwissenschaften belegen "
"und seit dem Abitur nichts mehr mit Logarithmen zu tun hatten und eine "
"kleine Auffrischung schätzen."

#: ../../Ch06/Ch06_DataHandling_4.rst:64
msgid ""
"In order to understand logarithms and exponentials, the easiest thing to do "
"is to actually calculate them and see how they relate to other simple "
"calculations. There are three jamovi functions in particular that I want to "
"talk about, namely ``LN()``, ``LOG10()`` and ``EXP()``. To start with, let’s "
"consider ``LOG10()``, which is known as the “logarithm in base 10”. The "
"trick to understanding a **logarithm** is to understand that it’s basically "
"the “opposite” of taking a power. Specifically, the logarithm in base 10 is "
"closely related to the powers of 10. So let’s start by noting that 10-cubed "
"is 1000. Mathematically, we would write this:"
msgstr ""
"Um Logarithmen und Exponentialfunktionen zu verstehen, ist es am "
"einfachsten, sie selbst zu berechnen und zu sehen, wie sie mit anderen "
"einfachen Berechnungen zusammenhängen. Es gibt insbesondere drei jamovi-"
"Funktionen, über die ich sprechen möchte, nämlich ``LN()``, ``LOG10()`` und "
"``EXP()``. Betrachten wir zunächst ``LOG10()``, die als „Logarithmus zur "
"Basis 10“ bekannt ist. Der Trick, um den **Logarithmus** zu verstehen, "
"besteht darin, dass er im Grunde das „Gegenteil“ der Potenzierung ist. "
"Insbesondere ist der Logarithmus zur Basis 10 eng mit den Potenzen von 10 "
"verbunden. Stellen wir also zunächst fest, dass 10-kubisch (10³) 1000 ist. "
"Mathematisch würden wir das so schreiben:"

#: ../../Ch06/Ch06_DataHandling_4.rst:75
msgid "10³ = 1000"
msgstr "10³ = 1000"

#: ../../Ch06/Ch06_DataHandling_4.rst:77
msgid ""
"The trick to understanding a logarithm is to recognise that the statement "
"that “10 to the power of 3 is equal to 1000” is equivalent to the statement "
"that “the logarithm (in base 10) of 1000 is equal to 3”. Mathematically, we "
"write this as follows,"
msgstr ""
"Der Trick, um einen Logarithmus zu verstehen, besteht darin, zu erkennen, "
"dass die Aussage „10 hoch 3 ist gleich 1000“ gleichbedeutend ist mit der "
"Aussage „der Logarithmus (zur Basis 10) von 1000 ist gleich 3“. Mathematisch "
"lässt sich dies wie folgt ausdrücken:"

#: ../../Ch06/Ch06_DataHandling_4.rst:82
msgid "log\\ :sub:`10`\\(1000) = 3"
msgstr "log\\ :sub:`10`\\(1000) = 3"

#: ../../Ch06/Ch06_DataHandling_4.rst:84
msgid ""
"Okay, since the ``LOG10()`` function is related to the powers of 10, you "
"might expect that there are other logarithms (in bases other than 10) that "
"are related to other powers too. And of course that’s true: there’s not "
"really anything mathematically special about the number 10. You and I happen "
"to find it useful because decimal numbers are built around the number 10, "
"but the big bad world of mathematics scoffs at our decimal numbers. Sadly, "
"the universe doesn’t actually care how we write down numbers. Anyway, the "
"consequence of this cosmic indifference is that there’s nothing particularly "
"special about calculating logarithms in base 10. You could, for instance, "
"calculate your logarithms in base 2. Alternatively, a third type of "
"logarithm, and one we see a lot more of in statistics than either base 10 or "
"base 2, is called the **natural logarithm**, and corresponds to the "
"logarithm in base *e*. Since you might one day run into it, I’d better "
"explain what *e* is. The number *e*, known as **Euler’s number**, is one of "
"those annoying “irrational” numbers whose decimal expansion is infinitely "
"long, and is considered one of the most important numbers in mathematics. "
"The first few digits of *e* are:"
msgstr ""
"Da sich die Funktion ``LOG10()`` auf die Potenzen von 10 bezieht, könnte man "
"erwarten, dass es andere Logarithmen (mit anderen Basen als 10) gibt, die "
"sich auch auf andere Potenzen beziehen. Und natürlich stimmt auch, dass die "
"Zahl 10 mathematisch gesehen nichts Besonderes ist. Sie und ich finden sie "
"nützlich, weil Dezimalzahlen um die Zahl 10 herum aufgebaut sind, aber die "
"große böse Welt der Mathematik macht sich über unsere Dezimalzahlen lustig. "
"Leider ist es dem Universum egal, wie wir Zahlen aufschreiben. Die Folge "
"dieser kosmischen Gleichgültigkeit ist, dass es nichts Besonderes ist, "
"Logarithmen zur Basis 10 zu berechnen. Sie könnten Ihre Logarithmen zum "
"Beispiel auch zur Basis 2 berechnen. Eine dritte Art von Logarithmus, die in "
"der Statistik viel häufiger vorkommt als zur Basis 10 oder zur Basis 2, wird "
"**natürlicher Logarithmus** genannt und entspricht dem Logarithmus zur Basis "
"*e*. Da Sie vielleicht eines Tages darauf stoßen werden, erkläre ich Ihnen "
"besser, was *e* ist. Die Zahl *e*, auch bekannt als **Eulersche Zahl**, ist "
"eine dieser lästigen „irrationalen“ Zahlen, deren Dezimalentwicklung "
"unendlich lang ist, und gilt als eine der wichtigsten Zahlen der Mathematik. "
"Die ersten paar Ziffern von *e* sind:"

#: ../../Ch06/Ch06_DataHandling_4.rst:102
msgid "*e* = 2.718282"
msgstr "*e* = 2.718282"

#: ../../Ch06/Ch06_DataHandling_4.rst:104
msgid ""
"There are quite a few situation in statistics that require us to calculate "
"powers of *e*, though none of them appear in this book. Raising *e* to the "
"power *x* is called the **exponential** of *x*, and so it’s very common to "
"see e\\ :sup:`x` written as *exp(x)*. And so it’s no surprise that jamovi "
"has a function that calculates exponentials, called ``EXP()``. Because the "
"number *e* crops up so often in statistics, the natural logarithm (i.e., "
"logarithm in base *e*) also tends to turn up. Mathematicians often write it "
"as log\\ :sub:`e`\\ (x) or *ln(x)*. In fact, jamovi works the same way: the "
"``LN()`` function corresponds to the natural logarithm."
msgstr ""
"Es gibt eine Reihe von Situationen in der Statistik, in denen wir Potenzen "
"von *e* berechnen müssen, obwohl keine davon in diesem Buch vorkommt. Die "
"Erhöhung von *e* auf die Potenz *x* wird als **Exponentialwert** von *x* "
"bezeichnet, und so sieht man e\\ :sup:`x` häufig als *exp(x)* geschrieben. "
"Und so ist es keine Überraschung, dass jamovi eine Funktion zur Berechnung "
"von Exponentialwerten hat, die ``EXP()`` heißt. Da die Zahl *e* in der "
"Statistik so häufig vorkommt, taucht auch der natürliche Logarithmus (d.h. "
"der Logarithmus zur Basis *e*) immer wieder auf. Mathematiker schreiben ihn "
"oft als log\\ :sub:`e`\\ (x) oder *ln(x)*. In der Tat funktioniert jamovi "
"auf die gleiche Weise: Die Funktion ``LN()`` entspricht dem natürlichen "
"Logarithmus."

#: ../../Ch06/Ch06_DataHandling_4.rst:115
msgid ""
"And with that, I think we’ve had quite enough exponentials and logarithms "
"for this book!"
msgstr ""
"Und damit, denke ich, haben wir genug Logarithmen und Exponentialfunktionen "
"für dieses Buch gehabt!"

#: ../../Ch06/Ch06_DataHandling_4.rst:121
msgid "We’ll leave the box-cox function until :ref:`later on <box-cox>`."
msgstr "Wir verschieben die Box-Cox-Funktion auf :ref:`später <box-cox>`."

#: ../../Ch06/Ch06_DataHandling_5.rst:4
msgid "Extracting a subset of the data"
msgstr "Extrahieren einer Teilmenge von Daten"

#: ../../Ch06/Ch06_DataHandling_5.rst:6
msgid ""
"One very important kind of data handling is being able to extract a "
"particular subset of the data. For instance, you might be interested only in "
"analysing the data from one experimental condition, or you may want to look "
"closely at the data from people over 50 years in age. To do this, the first "
"step is getting jamovi to filter the subset of the data corresponding to the "
"observations that you’re interested in."
msgstr ""
"Ein sehr wichtiger Schritt bei der Datenverarbeitung ist, eine bestimmte "
"Teilmenge der Daten zu extrahieren. Zum Beispiel könnte es sein, dass Sie "
"nur an der Analyse der Daten einer Versuchsbedingung interessiert sind, oder "
"dass Sie sich die Daten von Personen über 50 Jahren genauer ansehen möchten. "
"Zu diesem Zweck muss jamovi zunächst die Teilmenge der Daten filtern, die "
"den Beobachtungen entspricht, an denen Sie interessiert sind."

#: ../../Ch06/Ch06_DataHandling_5.rst:13
msgid ""
"This section returns to the |nightgarden|_ data set. If you’re reading this "
"whole chapter in one sitting, then you should already have this data set "
"loaded into a jamovi window. For this section, let’s focus on the two "
"variables ``speaker`` and ``utterance`` (see :doc:`Ch06_DataHandling_1` if "
"you’ve forgotten what those variables look like). Suppose that what I want "
"to do is pull out only those utterances that were made by ``makka-pakka``. "
"To that end, we need to specify a filter in jamovi. First open up a filter "
"window by clicking on ``Filters`` on the main jamovi ``Data`` toolbar. Then, "
"in the ``Filter 1`` text box, next to the ``=`` sign, type the following:"
msgstr ""
"Dieser Abschnitt kehrt zum Datensatz |nightgarden|_ zurück. Wenn Sie dieses "
"ganze Kapitel in einer Sitzung lesen, dann sollten Sie diesen Datensatz "
"bereits in jamovi geladen haben. In diesem Abschnitt wollen wir uns auf die "
"beiden Variablen ``speaker`` und ``utterance`` konzentrieren (siehe :doc:"
"`Ch06_DataHandling_1`, falls Sie vergessen haben, wie diese Variablen "
"aussehen). Nehmen wir an, dass ich nur die Äußerungen herausziehen möchte, "
"die von ``makka-pakka`` gemacht wurden. Zu diesem Zweck müssen wir einen "
"Filter in jamovi erstellen. Öffnen Sie zunächst ein Filter-Eingabefeld, "
"indem Sie auf ``Filters`` in der Symbolleiste des jamovi-Tabs ``Data`` "
"klicken. Geben Sie dann in das Textfeld ``Filter 1`` neben dem Zeichen ``=`` "
"Folgendes ein:"

#: ../../Ch06/Ch06_DataHandling_5.rst:27
msgid ""
"When you have done this, you will see that a new column has been added to "
"the spreadsheet window (see :numref:`fig-subset1`), labelled ``Filter 1``, "
"with the cases where ``speaker`` is not ``makka-pakka`` greyed-out (i.e., "
"filtered out) and, conversely, the cases where ``speaker`` is ``makka-"
"pakka`` have a green check mark indicating they are filtered in. You can "
"test this by running ``Exploration`` → ``Descriptives``, assigning "
"``speaker`` to the ``Variables``- box and checking ``Frequency tables``. Go "
"on, try it, and see what that shows!"
msgstr ""
"Wenn Sie dies getan haben, werden Sie sehen, dass eine neue Spalte zum "
"Tabellenfenster hinzugefügt wurde (siehe :numref:`fig-subset1`), die mit "
"``Filter 1`` beschriftet ist. Die Fälle, in denen ``speaker`` nicht ``makka-"
"pakka`` ist, sind ausgegraut (d.h. herausgefiltert) und umgekehrt haben die "
"Fälle, in denen ``speaker`` ``makka-pakka`` ist, ein grünes Häkchen, das "
"anzeigt, dass sie aktiv (d.h. in Analysen eingeschlossen) sind. Sie können "
"dies testen, indem Sie ``Exploration`` → ``Descriptives`` ausführen, "
"``speaker`` dem Feld ``Variables``- zuordnen und ``Frequency tables`` "
"ankreuzen. Probieren Sie es aus, und sehen Sie, was dabei herauskommt!"

#: ../../Ch06/Ch06_DataHandling_5.rst:37
msgid "Creating a subset using ``Filters``"
msgstr "Erstellen einer Teilmenge mit ``Filters``"

#: ../../Ch06/Ch06_DataHandling_5.rst:41
msgid ""
"Creating a subset of the |nightgarden|_ data set using the jamovi "
"``Filters`` option"
msgstr ""
"Erstellen einer Teilmenge des Datensatzes |nightgarden|_ unter Verwendung "
"der jamovi-Option ``Filters``"

#: ../../Ch06/Ch06_DataHandling_5.rst:46
msgid ""
"Following on from this simple example, you can also build up more complex "
"filters using logical expressions in jamovi. For instance, suppose I wanted "
"to keep only those cases when the utterance is either ``pip`` or ``oo``. In "
"this case in the ``Filter 1`` text box, next to the ``=`` sign, you would "
"type the following:"
msgstr ""
"Ausgehend von diesem einfachen Beispiel können Sie auch komplexere Filter "
"mit logischen Ausdrücken in jamovi erstellen. Nehmen wir zum Beispiel an, "
"ich möchte nur die Fälle behalten, in denen die Äußerung entweder ``pip`` "
"oder ``oo`` ist. In diesem Fall würde man in das Textfeld ``Filter 1`` neben "
"dem Zeichen ``=`` folgendes eingeben:"
